{
  "version": 3,
  "sources": ["../../src/index.js", "../../src/UserContext.js", "../../src/AppConfigContext.js", "../../src/DDBContext.js", "../../src/LambdaContext.js", "../../src/BaseAppScope.js", "../../src/AuthRedirect.js", "../../src/MessageContext.js", "../../src/SpinnerContext.js", "../../src/InfrastructureProvider.js", "../../src/useAppBarState.js", "../../src/useAppDrawerState.js"],
  "sourcesContent": ["import useUser from './UserContext';\nimport useDDB from './DDBContext';\nimport useLambda from './LambdaContext';\nimport useAppConfig, { makeAppConfig } from './AppConfigContext';\nimport BaseAppScope, { useBaseAppScopeState } from './BaseAppScope';\nimport useAppBarState from './useAppBarState';\nimport useAppDrawerState from './useAppDrawerState';\nimport useMessage, { useMessageAreaState } from './MessageContext';\nimport useSpinner, { useSpinnerAreaState } from './SpinnerContext';\n\nexport {\n  BaseAppScope,\n  makeAppConfig,\n  useAppConfig,\n  useAppDrawerState,\n  useBaseAppScopeState,\n  useDDB,\n  useLambda,\n  useMessage,\n  useMessageAreaState,\n  useAppBarState,\n  useSpinner,\n  useSpinnerAreaState,\n  useUser\n};\n", "import React, {\r\n  createContext,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  useState\r\n} from 'react';\r\n\r\nimport { fromCognitoIdentityPool } from '@aws-sdk/credential-provider-cognito-identity';\r\nimport { CognitoIdentityClient } from '@aws-sdk/client-cognito-identity';\r\n\r\nimport useAppConfig from './AppConfigContext';\r\n\r\nconst UserContext = createContext();\r\n\r\nconst useSetInterval = (callback, seconds) => {\r\n  const intervalRef = useRef();\r\n  const cancel = useCallback(() => {\r\n    const interval = intervalRef.current;\r\n    if (interval) {\r\n      intervalRef.current = undefined;\r\n      clearInterval(interval);\r\n    }\r\n  }, [intervalRef]);\r\n\r\n  useEffect(() => {\r\n    intervalRef.current = setInterval(callback, seconds);\r\n    return cancel;\r\n  }, [callback, seconds, cancel]);\r\n\r\n  return cancel;\r\n};\r\n\r\nconst UserProvider = ({ children }) => {\r\n  const {\r\n    appConfig: {\r\n      appAuthRedirect,\r\n      appAuthUrl,\r\n      appClientId,\r\n      appIdentityPoolId,\r\n      appRegion,\r\n      appUserPoolId,\r\n      appRefreshTokenStorageKey,\r\n      appMessages\r\n    }\r\n  } = useAppConfig();\r\n\r\n  const [user, setUser] = useState({\r\n    identityId: undefined,\r\n    id: undefined,\r\n    name: undefined,\r\n    email: undefined,\r\n    groups: undefined,\r\n    idToken: undefined,\r\n    accessToken: undefined\r\n  });\r\n  const [refreshToken, setRefreshToken] = useState(\r\n    sessionStorage.getItem(appRefreshTokenStorageKey)\r\n  );\r\n  const [awsConfig, setAwsConfig] = useState(undefined);\r\n  const [refreshTokenInterval] = useState(25 * 60000);\r\n  const [awsCredentials, setAwsCredentials] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    if (refreshToken) {\r\n      sessionStorage.setItem(appRefreshTokenStorageKey, refreshToken);\r\n    } else {\r\n      sessionStorage.removeItem(appRefreshTokenStorageKey);\r\n    }\r\n  }, [refreshToken, appRefreshTokenStorageKey]);\r\n\r\n  const logoff = useCallback(() => (\r\n    new Promise((resolve) => {\r\n      setUser({\r\n        identityId: undefined,\r\n        id: undefined,\r\n        name: undefined,\r\n        email: undefined,\r\n        groups: undefined,\r\n        idToken: undefined,\r\n        accessToken: undefined\r\n      });\r\n      setRefreshToken(undefined);\r\n      setAwsConfig(undefined);\r\n      resolve();\r\n    })\r\n  ), []);\r\n\r\n  useEffect(() => {\r\n    if (awsCredentials) {\r\n      setAwsConfig((oldAwsConfig) => {\r\n        if (oldAwsConfig) {\r\n          oldAwsConfig.update({ credentials: awsCredentials });\r\n          return oldAwsConfig;\r\n        }\r\n        return {\r\n          region: appRegion,\r\n          credentials: awsCredentials\r\n        };\r\n      });\r\n    } else {\r\n      setAwsConfig(undefined);\r\n    }\r\n  }, [awsCredentials, appRegion]);\r\n\r\n  const loginWithAwsCognitoIdentityPool = useCallback((idToken, accessToken) => {\r\n    const newCredentials = fromCognitoIdentityPool({\r\n      client: new CognitoIdentityClient({\r\n        region: appRegion\r\n      }),\r\n      identityPoolId: appIdentityPoolId,\r\n      ...(idToken && { logins: { [appUserPoolId]: idToken } })\r\n    });\r\n\r\n    return new Promise((resolve, reject) => {\r\n      newCredentials().then((creds) => {\r\n        setAwsCredentials(newCredentials);\r\n        setUser((oldUser) => {\r\n          const idTokenPayload = idToken && JSON.parse(atob(idToken.split('.')[1]));\r\n          oldUser.identityId = creds.identityId;\r\n          oldUser.id = idTokenPayload && idTokenPayload.sub;\r\n          oldUser.name = idTokenPayload ? idTokenPayload.name : appMessages.LOGGED_OUT_USER;\r\n          oldUser.email = idTokenPayload && idTokenPayload.email;\r\n          oldUser.groups = idTokenPayload && idTokenPayload['cognito:groups'];\r\n          oldUser.idToken = idToken;\r\n          oldUser.accessToken = accessToken;\r\n          return oldUser;\r\n        });\r\n        resolve();\r\n      }).catch((err) => {\r\n        setAwsCredentials(undefined);\r\n        setUser({\r\n          identityId: undefined,\r\n          id: undefined,\r\n          name: undefined,\r\n          email: undefined,\r\n          groups: undefined,\r\n          idToken: undefined,\r\n          accessToken: undefined\r\n        });\r\n        reject(err);\r\n      });\r\n    });\r\n  }, [appIdentityPoolId, appRegion, appUserPoolId, appMessages]);\r\n\r\n  const refreshIdAndAccessTokens = useCallback((refreshTokenParam) => (\r\n    new Promise((resolve, reject) => {\r\n      if (refreshTokenParam) {\r\n        fetch(appAuthUrl, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n          body: `grant_type=refresh_token&client_id=${appClientId}&refresh_token=${refreshTokenParam}`\r\n        }).then((response) => {\r\n          response.json().then((res) => {\r\n            loginWithAwsCognitoIdentityPool(res.id_token, res.access_token).then(() => {\r\n              resolve();\r\n            }).catch((err) => {\r\n              console.error(appMessages.LOG_COULD_NOT_LOGIN_WITH_REFRESHED_TOKENS, err);\r\n              reject(err);\r\n            });\r\n          }).catch((err) => {\r\n            console.error(appMessages.LOG_COULD_NOT_DECODE_AUTHENTICATION_RESPONSE, err);\r\n            reject(err);\r\n          });\r\n        }).catch((err) => {\r\n          console.error(appMessages.LOG_COULD_NOT_GET_REFRESHED_TOKENS, err);\r\n          reject(err);\r\n        });\r\n      } else {\r\n        console.warn(appMessages.LOG_NO_REFRESH_TOKEN_AVAILABLE);\r\n        reject(new Error(appMessages.LOG_NO_REFRESH_TOKEN_AVAILABLE));\r\n      }\r\n    })\r\n  ), [loginWithAwsCognitoIdentityPool, appAuthUrl, appClientId, appMessages]);\r\n\r\n  const scheduledRefreshIdAndAccessTokens = useCallback(() => {\r\n    refreshIdAndAccessTokens(refreshToken).catch((err) => {\r\n      console.error(appMessages.LOG_COULD_NOT_REFRESH_TOKENS, err);\r\n    });\r\n  }, [refreshToken, refreshIdAndAccessTokens, appMessages]);\r\n\r\n  useSetInterval(scheduledRefreshIdAndAccessTokens, refreshTokenInterval);\r\n\r\n  const loginAnonymously = useCallback(() => (\r\n    loginWithAwsCognitoIdentityPool()\r\n  ), [loginWithAwsCognitoIdentityPool]);\r\n\r\n  const loginWithAuthorizationCode = useCallback((authorizationCode) => (\r\n    new Promise((resolve, reject) => {\r\n      fetch(appAuthUrl, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n        body: `grant_type=authorization_code&client_id=${appClientId}&code=${authorizationCode}&redirect_uri=${appAuthRedirect}`\r\n      }).then((response) => {\r\n        response.json().then((res) => {\r\n          refreshIdAndAccessTokens(res.refresh_token).then(() => {\r\n            setRefreshToken(res.refresh_token);\r\n            resolve();\r\n          }).catch((err) => {\r\n            console.error(appMessages.LOG_COULD_NOT_LOGIN_WITH_REFRESHED_TOKENS, err);\r\n            setRefreshToken(undefined);\r\n            reject(err);\r\n          });\r\n        }).catch((err) => {\r\n          console.error(appMessages.LOG_COULD_NOT_DECODE_AUTHENTICATION_RESPONSE, err);\r\n          setRefreshToken(undefined);\r\n          reject(err);\r\n        });\r\n      }).catch((err) => {\r\n        console.error(appMessages.LOG_COULD_NOT_GET_IDENTIFICATION_TOKENS, err);\r\n        setRefreshToken(undefined);\r\n        reject(err);\r\n      });\r\n    })\r\n  ), [refreshIdAndAccessTokens, appAuthRedirect, appAuthUrl, appClientId, appMessages]);\r\n\r\n  useEffect(() => {\r\n    if (refreshToken && !awsCredentials) {\r\n      refreshIdAndAccessTokens(refreshToken).catch((err) => {\r\n        console.error(appMessages.LOG_COULD_NOT_REFRESH_TOKENS, err);\r\n      });\r\n    }\r\n  }, [refreshToken, awsCredentials, refreshIdAndAccessTokens, appMessages]);\r\n\r\n  return <UserContext.Provider\r\n      value={{\r\n        user,\r\n        awsConfig,\r\n        awsCredentials,\r\n        loginAnonymously,\r\n        loginWithAuthorizationCode,\r\n        logoff\r\n      }}>\r\n      {children}\r\n    </UserContext.Provider>;\r\n};\r\n\r\nconst useUser = () => {\r\n  const {\r\n    user,\r\n    awsConfig,\r\n    awsCredentials,\r\n    loginAnonymously,\r\n    loginWithAuthorizationCode,\r\n    logoff\r\n  } = useContext(UserContext);\r\n\r\n  return {\r\n    user,\r\n    awsConfig,\r\n    awsCredentials,\r\n    loginAnonymously,\r\n    loginWithAuthorizationCode,\r\n    logoff\r\n  };\r\n};\r\n\r\nexport default useUser;\r\nexport { UserProvider };\r\n", "import React, { createContext, useContext } from 'react';\r\n\r\nconst AppConfigContext = createContext();\r\n\r\nconst makeAppConfig = ({\r\n  appHost,\r\n  appBasePath,\r\n  appRegion,\r\n  appUserPoolId,\r\n  appUserPoolDomain,\r\n  appClientId,\r\n  appIdentityPoolId,\r\n  appRefreshTokenStorageKey,\r\n  appLogoUrl,\r\n  appMessages,\r\n  hideLogin\r\n}) => {\r\n  const appBaseAuthUrl = `https://${appUserPoolDomain}.auth.${appRegion}.amazoncognito.com`;\r\n  const appAuthRedirect = `${appHost}${appBasePath}?auth-redirect`;\r\n  const appAuthUrl = `${appBaseAuthUrl}/oauth2/token`;\r\n  const appExternalLoginUrl = `${appBaseAuthUrl}/login?client_id=${appClientId}&response_type=code&scope=email+openid+profile&redirect_uri=${appAuthRedirect}`;\r\n\r\n  return {\r\n    appHost,\r\n    appBasePath,\r\n    appRegion,\r\n    appUserPoolId,\r\n    appUserPoolDomain,\r\n    appClientId,\r\n    appIdentityPoolId,\r\n    appBaseAuthUrl,\r\n    appAuthRedirect,\r\n    appAuthUrl,\r\n    appExternalLoginUrl,\r\n    appRefreshTokenStorageKey,\r\n    appLogoUrl,\r\n    appMessages,\r\n    hideLogin: hideLogin || false\r\n  };\r\n};\r\n\r\nconst AppConfigProvider = ({ appConfig, children }) => (\r\n  <AppConfigContext.Provider value={{ appConfig }}>\r\n    {children}\r\n  </AppConfigContext.Provider>\r\n);\r\n\r\nconst useAppConfig = () => {\r\n  const { appConfig } = useContext(AppConfigContext);\r\n\r\n  return { appConfig };\r\n};\r\n\r\nexport default useAppConfig;\r\nexport { AppConfigProvider, makeAppConfig };\r\n", "import React, {\r\n  createContext,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useState\r\n} from 'react';\r\n\r\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb';\r\nimport {\r\n  DynamoDBDocumentClient,\r\n  GetCommand,\r\n  PutCommand,\r\n  UpdateCommand\r\n} from '@aws-sdk/lib-dynamodb';\r\n\r\nimport useUser from './UserContext';\r\n\r\nconst DDBContext = createContext();\r\n\r\nconst DDBProvider = ({ children }) => {\r\n  const { awsConfig, awsCredentials } = useUser();\r\n  const [documentDB, setDocumentDB] = useState();\r\n\r\n  useEffect(() => {\r\n    if (awsConfig) {\r\n      const ddbClient = new DynamoDBClient(awsConfig);\r\n      setDocumentDB(new DynamoDBDocumentClient(ddbClient));\r\n    } else {\r\n      setDocumentDB(undefined);\r\n    }\r\n  }, [awsConfig]);\r\n\r\n  useEffect(() => {\r\n    if (awsCredentials) {\r\n      setDocumentDB((oldDocumentDB) => {\r\n        if (oldDocumentDB) {\r\n          oldDocumentDB.service.config.update({ credentials: awsCredentials });\r\n        }\r\n        return oldDocumentDB;\r\n      });\r\n    }\r\n  }, [awsCredentials]);\r\n\r\n  return <DDBContext.Provider value={{ documentDB }}>{children}</DDBContext.Provider>;\r\n};\r\n\r\nconst useDDB = () => {\r\n  const { documentDB } = useContext(DDBContext);\r\n\r\n  const ddbGet = useCallback(\r\n    (params) => documentDB.send(new GetCommand(params)),\r\n    [documentDB]\r\n  );\r\n\r\n  const ddbPut = useCallback(\r\n    (params) => documentDB.send(new PutCommand(params)),\r\n    [documentDB]\r\n  );\r\n\r\n  const ddbUpdate = useCallback(\r\n    (params) => documentDB.send(new UpdateCommand(params)),\r\n    [documentDB]\r\n  );\r\n\r\n  return {\r\n    documentDB,\r\n    ddbGet: documentDB && ddbGet,\r\n    ddbPut: documentDB && ddbPut,\r\n    ddbUpdate: documentDB && ddbUpdate\r\n  };\r\n};\r\n\r\nexport default useDDB;\r\nexport { DDBProvider };\r\n", "import React, {\r\n  createContext,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useState\r\n} from 'react';\r\n\r\nimport { LambdaClient, InvokeCommand } from '@aws-sdk/client-lambda';\r\n\r\nimport useUser from './UserContext';\r\n\r\nconst LambdaContext = createContext();\r\n\r\nconst LambdaProvider = ({ children }) => {\r\n  const { user: { accessToken }, awsConfig, awsCredentials } = useUser();\r\n  const [lambda, setLambda] = useState();\r\n\r\n  useEffect(() => {\r\n    if (awsConfig) {\r\n      setLambda(new LambdaClient(awsConfig));\r\n    } else {\r\n      setLambda(undefined);\r\n    }\r\n  }, [awsConfig]);\r\n\r\n  useEffect(() => {\r\n    if (awsCredentials) {\r\n      setLambda((oldLambda) => {\r\n        if (oldLambda) {\r\n          oldLambda.config.update({ credentials: awsCredentials });\r\n        }\r\n        return oldLambda;\r\n      });\r\n    }\r\n  }, [awsCredentials]);\r\n\r\n  const invokeLambda = useCallback((functionName, payload) => {\r\n    const params = {\r\n      FunctionName: functionName,\r\n      ClientContext: btoa(JSON.stringify({ custom: { accessToken } }))\r\n    };\r\n    if (payload) {\r\n      params.Payload = JSON.stringify(payload);\r\n    }\r\n    const command = new InvokeCommand(params);\r\n    return new Promise((resolve, reject) => {\r\n      lambda.send(command).then((data) => {\r\n        if (!data.StatusCode || data.StatusCode !== 200 || !data.Payload) {\r\n          reject(data);\r\n        }\r\n        const responsePayload = JSON.parse(Buffer.from(data.Payload));\r\n        if (!responsePayload || !responsePayload.statusCode || responsePayload.statusCode !== 200) {\r\n          reject(data);\r\n        }\r\n        resolve(responsePayload.body);\r\n      }).catch((err) => {\r\n        reject(err);\r\n      });\r\n    });\r\n  }, [lambda, accessToken]);\r\n\r\n  return <LambdaContext.Provider value={{ invokeLambda: lambda && invokeLambda }}>\r\n      {children}\r\n    </LambdaContext.Provider>;\r\n};\r\n\r\nconst useLambda = () => {\r\n  const { invokeLambda } = useContext(LambdaContext);\r\n\r\n  return { invokeLambda };\r\n};\r\n\r\nexport default useLambda;\r\nexport { LambdaProvider };\r\n", "import React, { useEffect, useState } from 'react';\nimport {\n  HashRouter, Route, Routes, useNavigate\n} from 'react-router-dom';\n\nimport AuthRedirect from './AuthRedirect';\nimport InfrastructureProvider from './InfrastructureProvider';\n\nconst useBaseAppScopeState = (appRoutes) => {\n  const [routes] = useState([\n    ...appRoutes,\n    {\n      name: 'authentication',\n      label: 'Athentication',\n      path: '/authentication/:authorization_code',\n      hideFromMenu: true,\n      component: AuthRedirect\n    }]);\n  return { routes };\n};\n\nconst RedirectAuthCode = ({ appConfig }) => {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (window.location.pathname === appConfig.appBasePath) {\n      const search = new URLSearchParams(window.location.search);\n      if (search.get('auth-redirect') !== null && search.get('code') !== null) {\n        window.history.replaceState({}, '', window.location.pathname);\n        navigate(`/authentication/${search.get('code')}`, { replace: true });\n      }\n    }\n  }, []);\n\n  return null;\n};\n\nconst BaseAppScope = ({ appConfig, routes, children }) => (\n  <InfrastructureProvider appConfig={appConfig}>\n    <HashRouter>\n      {children}\n      <RedirectAuthCode appConfig={appConfig} />\n      <Routes>\n        {routes.map((route) => (\n          <Route key={`${route.name}-route`} exact={true} path={route.path} element={<route.component />} {...route.options} />\n        ))}\n      </Routes>\n    </HashRouter>\n  </InfrastructureProvider>\n);\n\nexport default BaseAppScope;\nexport { useBaseAppScopeState };\n", "import { useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\n\r\nimport useAppConfig from './AppConfigContext';\r\nimport useMessage from './MessageContext';\r\nimport useUser from './UserContext';\r\nimport useSpinner from './SpinnerContext';\r\n\r\nconst AuthRedirect = () => {\r\n  const { appConfig: { appMessages } } = useAppConfig();\r\n  const { showMessage } = useMessage();\r\n  const { loginWithAuthorizationCode } = useUser();\r\n  const { authorization_code: authorizationCode } = useParams();\r\n  const { showSpinner, dismissSpinner } = useSpinner();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(\n    () => {\r\n      showSpinner();\r\n      loginWithAuthorizationCode(authorizationCode).then(() => {\r\n        showMessage(appMessages.LOGIN_SUCCESSFUL);\r\n        navigate('/', { replace: true });\r\n      }).catch(() => {\r\n        showMessage(appMessages.LOGIN_FAILED);\r\n      }).finally(() => {\r\n        dismissSpinner();\r\n      });\r\n    },\r\n    [\r\n      authorizationCode,\r\n      loginWithAuthorizationCode,\r\n      showMessage,\r\n      navigate,\r\n      appMessages,\r\n      showSpinner,\r\n      dismissSpinner\r\n    ]\n  );\r\n\r\n  return null;\r\n};\r\n\r\nexport default AuthRedirect;\r\n", "import React, {\r\n  createContext,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useState\r\n} from 'react';\r\n\r\nconst MessageContext = createContext();\r\n\r\nconst MessageProvider = ({ children }) => {\r\n  const [snackPack, setSnackPack] = useState([]);\r\n  const [message, setMessage] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    if (snackPack.length && !message) {\r\n      setMessage(snackPack[0]);\r\n      setSnackPack((prev) => prev.slice(1));\r\n    }\r\n  }, [snackPack, message]);\r\n\r\n  const showMessage = useCallback((newMessage) => {\r\n    setSnackPack((prev) => [...prev, newMessage]);\r\n  }, []);\r\n\r\n  const dismissMessage = useCallback(() => {\r\n    setMessage(undefined);\r\n  }, []);\r\n\r\n  return <MessageContext.Provider value={{ message, showMessage, dismissMessage }}>\r\n      {children}\r\n    </MessageContext.Provider>;\r\n};\r\n\r\nconst useMessage = () => {\r\n  const { showMessage } = useContext(MessageContext);\r\n\r\n  return { showMessage };\r\n};\r\n\r\nconst useMessageAreaState = () => {\r\n  const { message, dismissMessage } = useContext(MessageContext);\r\n\r\n  return { message, dismissMessage };\r\n};\r\n\r\nexport default useMessage;\r\nexport { MessageProvider, useMessageAreaState };\r\n", "import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useState\n} from 'react';\n\nconst SpinnerContext = createContext();\n\nconst SpinnerProvider = ({ children }) => {\n  const [spinnerCount, setSpinnerCount] = useState(0);\n\n  const showSpinner = useCallback(() => {\n    setSpinnerCount((prev) => prev + 1);\n  }, []);\n\n  const dismissSpinner = useCallback(() => {\n    setSpinnerCount((prev) => prev - 1);\n  }, []);\n\n  const showing = spinnerCount > 0;\n\n  return <SpinnerContext.Provider value={{ showSpinner, dismissSpinner, showing }}>\n      {children}\n    </SpinnerContext.Provider>;\n};\n\nconst useSpinner = () => {\n  const { showSpinner, dismissSpinner } = useContext(SpinnerContext);\n\n  return { showSpinner, dismissSpinner };\n};\n\nconst useSpinnerAreaState = () => {\n  const { showing } = useContext(SpinnerContext);\n\n  return { showing };\n};\n\nexport default useSpinner;\nexport { SpinnerProvider, useSpinnerAreaState };\n", "import React from 'react';\n\nimport { MessageProvider } from './MessageContext';\nimport { SpinnerProvider } from './SpinnerContext';\nimport { UserProvider } from './UserContext';\nimport { DDBProvider } from './DDBContext';\nimport { LambdaProvider } from './LambdaContext';\nimport { AppConfigProvider } from './AppConfigContext';\n\nconst InfrastructureProvider = ({ appConfig, children }) => (\n  <MessageProvider>\n    <SpinnerProvider>\n      <AppConfigProvider appConfig={appConfig}>\n        <UserProvider>\n          <DDBProvider>\n            <LambdaProvider>\n              { children }\n            </LambdaProvider>\n          </DDBProvider>\n        </UserProvider>\n      </AppConfigProvider>\n    </SpinnerProvider>\n  </MessageProvider>\n);\n\nexport default InfrastructureProvider;\n", "import { useLocation } from 'react-router-dom';\n\nimport useAppConfig from './AppConfigContext';\nimport useMessage from './MessageContext';\nimport useUser from './UserContext';\n\nconst useAppBarState = (routes) => {\n  const { appConfig: { appExternalLoginUrl, appMessages, hideLogin } } = useAppConfig();\n  const { showMessage } = useMessage();\n  const { user: { name: userName }, logoff } = useUser();\n\n  const location = useLocation();\n\n  const logoffAndShowMessage = () => {\n    logoff().then(() => {\n      showMessage(appMessages.LOGOUT_SUCCESSFUL);\n    }).catch(() => {\n      showMessage(appMessages.LOGOUT_FAILED);\n    });\n  };\n\n  const currentRoute = routes.find((route) => route.path === location.pathname);\n  const currentRouteLabel = currentRoute ? currentRoute.label : '';\n\n  const hideLoginButton = (userName || hideLogin);\n  const hideAccountButton = (!userName || hideLogin);\n\n  return {\n    currentRouteLabel,\n    hideLoginButton,\n    appExternalLoginUrl,\n    hideAccountButton,\n    userName,\n    logoffAndShowMessage\n  };\n};\n\nexport default useAppBarState;\n", "import useAppConfig from './AppConfigContext';\nimport useUser from './UserContext';\n\nconst useAppDrawerState = (routes) => {\n  const { appConfig: { appLogoUrl } } = useAppConfig();\n  const { user: { groups: userGroups } } = useUser();\n\n  const userFromAuthorizedGroup = (authorizedGroups) => {\n    if (!authorizedGroups) {\n      return true;\n    }\n    if (!userGroups) {\n      return false;\n    }\n    return authorizedGroups.some((authorizedGroup) => userGroups.includes(authorizedGroup));\n  };\n\n  const menuRoutes = routes.filter((route) => !route.hideFromMenu)\n    .filter((route) => userFromAuthorizedGroup(route.authorizedGroups));\n\n  return { appLogoUrl, menuRoutes };\n};\n\nexport default useAppDrawerState;\n"],
  "mappings": "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",
  "names": ["import_react", "React", "React", "import_react", "React", "import_react", "React", "import_react", "import_react_router_dom", "import_react", "import_react", "React", "import_react", "React", "import_react", "React", "React", "import_react_router_dom"]
}
