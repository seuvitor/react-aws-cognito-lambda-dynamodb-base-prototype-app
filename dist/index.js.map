{"version":3,"file":"index.js","sources":["../src/AppConfigContext.tsx","../src/core/authentication.ts","../src/UserContext.tsx","../src/DDBContext.tsx","../src/LambdaContext.tsx","../src/MessageContext.tsx","../src/SpinnerContext.tsx","../src/InfrastructureProvider.tsx","../src/core/authRedirect.ts","../src/useAuthRedirect.ts","../src/BaseAppScope.tsx","../src/core/makeAppConfig.ts","../src/useAppBarState.ts","../src/useAppDrawerState.ts"],"sourcesContent":["import { createContext, useContext } from \"react\";\nimport type { PropsWithChildren } from \"react\";\nimport type { AppConfig } from \"./core/makeAppConfig\";\n\ntype AppConfigContextValue =\n\t| {\n\t\t\tappConfig: AppConfig;\n\t  }\n\t| undefined;\n\nconst AppConfigContext = createContext<AppConfigContextValue>(undefined);\n\ntype AppConfigProviderProps = PropsWithChildren<{\n\tappConfig: AppConfig;\n}>;\n\nconst AppConfigProvider = ({ appConfig, children }: AppConfigProviderProps) => (\n\t<AppConfigContext.Provider value={{ appConfig }}>\n\t\t{children}\n\t</AppConfigContext.Provider>\n);\n\nconst useAppConfig = () => {\n\tconst ctx = useContext(AppConfigContext);\n\n\tif (ctx === undefined) {\n\t\tthrow new Error(\n\t\t\t\"useAppConfig can only be used in the scope of a AppConfigProvider\",\n\t\t);\n\t}\n\n\tconst { appConfig } = ctx;\n\treturn { appConfig };\n};\n\nexport default useAppConfig;\nexport { AppConfigProvider };\n","import { CognitoIdentityClient } from \"@aws-sdk/client-cognito-identity\";\nimport {\n\ttype CognitoIdentityCredentialProvider,\n\tfromCognitoIdentityPool,\n} from \"@aws-sdk/credential-provider-cognito-identity\";\nimport type { AppConfig, AppMessages } from \"./makeAppConfig\";\n\nconst initialUserState = {\n\tappConfig: undefined,\n\tuser: {\n\t\tidentityId: undefined,\n\t\tid: undefined,\n\t\tname: undefined,\n\t\temail: undefined,\n\t\tgroups: undefined,\n\t\tidToken: undefined,\n\t\taccessToken: undefined,\n\t},\n\trefreshToken: undefined,\n\tawsConfig: undefined,\n\tawsCredentials: undefined,\n};\n\nconst getRefreshTokenFromSessionStorage = (appRefreshTokenStorageKey: string) =>\n\tsessionStorage.getItem(appRefreshTokenStorageKey);\n\nconst updateRefreshTokenInSessionStorage = (\n\trefreshToken: string | undefined,\n\tappRefreshTokenStorageKey: string,\n) => {\n\tif (refreshToken) {\n\t\tsessionStorage.setItem(appRefreshTokenStorageKey, refreshToken);\n\t} else {\n\t\tsessionStorage.removeItem(appRefreshTokenStorageKey);\n\t}\n};\n\ntype AwsCredentialsState = {\n\tawsCredentials: undefined | CognitoIdentityCredentialProvider;\n\tuser: {\n\t\tidentityId: undefined | string;\n\t\tid: undefined | string;\n\t\tname: undefined | string;\n\t\temail: undefined | string;\n\t\tgroups: undefined | string[];\n\t\tidToken: undefined | string;\n\t\taccessToken: undefined | string;\n\t};\n\tawsConfig:\n\t\t| undefined\n\t\t| {\n\t\t\t\tregion: undefined | string;\n\t\t\t\tcredentials: undefined | CognitoIdentityCredentialProvider;\n\t\t  };\n};\n\nexport type LoginState = AwsCredentialsState & {\n\trefreshToken: undefined | string;\n};\n\nconst stateUpdateFromClearAwsCredentials: AwsCredentialsState = {\n\tawsCredentials: undefined,\n\tuser: {\n\t\tidentityId: undefined,\n\t\tid: undefined,\n\t\tname: undefined,\n\t\temail: undefined,\n\t\tgroups: undefined,\n\t\tidToken: undefined,\n\t\taccessToken: undefined,\n\t},\n\tawsConfig: undefined,\n};\n\nconst stateUpdateFromFailedLogin: LoginState = {\n\t...stateUpdateFromClearAwsCredentials,\n\trefreshToken: undefined,\n};\n\nconst stateUpdateFromNewAwsCredentials = (\n\tawsCredentials: CognitoIdentityCredentialProvider,\n\tidentityId: string,\n\tidToken: string | undefined,\n\taccessToken: string | undefined,\n\tappMessages: AppMessages,\n\tappRegion: string,\n): AwsCredentialsState => {\n\tconst idTokenPayload = idToken && JSON.parse(atob(idToken.split(\".\")[1]));\n\tconst user = {\n\t\tidentityId,\n\t\tid: idTokenPayload?.sub,\n\t\tname: idTokenPayload ? idTokenPayload.name : appMessages.LOGGED_OUT_USER,\n\t\temail: idTokenPayload?.email,\n\t\tgroups: idTokenPayload?.[\"cognito:groups\"],\n\t\tidToken,\n\t\taccessToken,\n\t};\n\tconst awsConfig = awsCredentials\n\t\t? { region: appRegion, credentials: awsCredentials }\n\t\t: undefined;\n\n\treturn {\n\t\tawsCredentials,\n\t\tuser,\n\t\tawsConfig,\n\t};\n};\n\nconst loginWithAwsCognitoIdentityPoolSemDispatch = (\n\tappConfig: AppConfig,\n\tidToken?: string,\n\taccessToken?: string,\n): Promise<AwsCredentialsState> => {\n\tconst { appIdentityPoolId, appRegion, appUserPoolId, appMessages } =\n\t\tappConfig;\n\n\tconst newCredentials = fromCognitoIdentityPool({\n\t\tclient: new CognitoIdentityClient({\n\t\t\tregion: appRegion,\n\t\t}),\n\t\tidentityPoolId: appIdentityPoolId,\n\t\t...(idToken && { logins: { [appUserPoolId]: idToken } }),\n\t});\n\n\treturn new Promise((resolve, reject) => {\n\t\tnewCredentials()\n\t\t\t.then((creds) => {\n\t\t\t\tresolve(\n\t\t\t\t\tstateUpdateFromNewAwsCredentials(\n\t\t\t\t\t\tnewCredentials,\n\t\t\t\t\t\tcreds.identityId,\n\t\t\t\t\t\tidToken,\n\t\t\t\t\t\taccessToken,\n\t\t\t\t\t\tappMessages,\n\t\t\t\t\t\tappRegion,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\treject(err);\n\t\t\t});\n\t});\n};\n\nconst refreshIdAndAccessTokensSemDispatch = (\n\tappConfig: AppConfig,\n\trefreshToken?: string,\n): Promise<AwsCredentialsState> => {\n\tconst { appAuthUrl, appClientId, appMessages } = appConfig;\n\treturn new Promise((resolve, reject) => {\n\t\tif (refreshToken) {\n\t\t\tfetch(appAuthUrl, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n\t\t\t\tbody: `grant_type=refresh_token&client_id=${appClientId}&refresh_token=${refreshToken}`,\n\t\t\t})\n\t\t\t\t.then((response) => {\n\t\t\t\t\tresponse\n\t\t\t\t\t\t.json()\n\t\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\t\tloginWithAwsCognitoIdentityPoolSemDispatch(\n\t\t\t\t\t\t\t\tappConfig,\n\t\t\t\t\t\t\t\tres.id_token,\n\t\t\t\t\t\t\t\tres.access_token,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.then((stateUpdate) => {\n\t\t\t\t\t\t\t\t\tresolve(stateUpdate);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t\t\t\tappMessages.LOG_COULD_NOT_LOGIN_WITH_REFRESHED_TOKENS,\n\t\t\t\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t\tappMessages.LOG_COULD_NOT_DECODE_AUTHENTICATION_RESPONSE,\n\t\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tconsole.error(appMessages.LOG_COULD_NOT_GET_REFRESHED_TOKENS, err);\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t} else {\n\t\t\tconsole.warn(appMessages.LOG_NO_REFRESH_TOKEN_AVAILABLE);\n\t\t\treject(Error(appMessages.LOG_NO_REFRESH_TOKEN_AVAILABLE));\n\t\t}\n\t});\n};\n\nconst loginWithAuthorizationCodeSemDispatch = (\n\tappConfig: AppConfig,\n\tauthorizationCode: string,\n): Promise<LoginState> => {\n\tconst { appAuthUrl, appClientId, appAuthRedirect, appMessages } = appConfig;\n\treturn new Promise((resolve, reject) => {\n\t\tfetch(appAuthUrl, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n\t\t\tbody: `grant_type=authorization_code&client_id=${appClientId}&code=${authorizationCode}&redirect_uri=${appAuthRedirect}`,\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tresponse\n\t\t\t\t\t.json()\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\trefreshIdAndAccessTokensSemDispatch(appConfig, res.refresh_token)\n\t\t\t\t\t\t\t.then((stateUpdate) => {\n\t\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\t\t...stateUpdate,\n\t\t\t\t\t\t\t\t\trefreshToken: res.refresh_token,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t\t\tappMessages.LOG_COULD_NOT_LOGIN_WITH_REFRESHED_TOKENS,\n\t\t\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\tappMessages.LOG_COULD_NOT_DECODE_AUTHENTICATION_RESPONSE,\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.error(appMessages.LOG_COULD_NOT_GET_IDENTIFICATION_TOKENS, err);\n\t\t\t\treject(err);\n\t\t\t});\n\t});\n};\n\nconst logoff = (\n\tsetUserState: (action: (prevState: LoginState) => LoginState) => void,\n\tappConfig: AppConfig,\n): Promise<void> =>\n\tnew Promise((resolve, _reject) => {\n\t\tupdateRefreshTokenInSessionStorage(\n\t\t\tundefined,\n\t\t\tappConfig.appRefreshTokenStorageKey,\n\t\t);\n\t\tsetUserState((_prevState) => stateUpdateFromFailedLogin);\n\t\tresolve();\n\t});\n\nconst setAppConfig = (\n\tsetUserState: (action: (prevState: LoginState) => LoginState) => void,\n\tappConfig: AppConfig,\n) => {\n\tconst refreshToken = getRefreshTokenFromSessionStorage(\n\t\tappConfig.appRefreshTokenStorageKey,\n\t);\n\tif (refreshToken) {\n\t\trefreshIdAndAccessTokens(setUserState, appConfig, refreshToken);\n\t}\n};\n\nconst loginWithAwsCognitoIdentityPool = (\n\tsetUserState: (action: (prevState: LoginState) => LoginState) => void,\n\tappConfig: AppConfig,\n\tidToken?: string,\n\taccessToken?: string,\n): void => {\n\tloginWithAwsCognitoIdentityPoolSemDispatch(appConfig, idToken, accessToken)\n\t\t.then((stateUpdate) => {\n\t\t\tsetUserState((oldState: LoginState) => ({ ...oldState, stateUpdate }));\n\t\t})\n\t\t.catch(() => {\n\t\t\tsetUserState((_prevState) => stateUpdateFromFailedLogin);\n\t\t});\n};\n\nconst refreshIdAndAccessTokens = (\n\tsetUserState: (action: (prevState: LoginState) => LoginState) => void,\n\tappConfig: AppConfig,\n\trefreshToken?: string,\n): Promise<void> =>\n\tnew Promise((resolve, reject) => {\n\t\trefreshIdAndAccessTokensSemDispatch(appConfig, refreshToken)\n\t\t\t.then((stateUpdate) => {\n\t\t\t\tsetUserState((prevState) => ({ ...prevState, ...stateUpdate }));\n\t\t\t\tresolve();\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tsetUserState((_prevState) => stateUpdateFromFailedLogin);\n\t\t\t\treject(err);\n\t\t\t});\n\t});\n\nconst loginWithAuthorizationCode = (\n\tsetUserState: (action: (prevState: LoginState) => LoginState) => void,\n\tappConfig: AppConfig,\n\tauthorizationCode: string,\n): Promise<void> =>\n\tnew Promise((resolve, reject) => {\n\t\tloginWithAuthorizationCodeSemDispatch(appConfig, authorizationCode)\n\t\t\t.then((stateUpdate) => {\n\t\t\t\tconst { refreshToken } = stateUpdate;\n\t\t\t\tupdateRefreshTokenInSessionStorage(\n\t\t\t\t\trefreshToken,\n\t\t\t\t\tappConfig.appRefreshTokenStorageKey,\n\t\t\t\t);\n\t\t\t\tsetUserState((_prevState) => stateUpdate);\n\t\t\t\tresolve();\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconst refreshToken = undefined;\n\t\t\t\tupdateRefreshTokenInSessionStorage(\n\t\t\t\t\trefreshToken,\n\t\t\t\t\tappConfig.appRefreshTokenStorageKey,\n\t\t\t\t);\n\t\t\t\tsetUserState((_prevState) => stateUpdateFromFailedLogin);\n\t\t\t\treject(err);\n\t\t\t});\n\t});\n\nexport {\n\tlogoff,\n\tsetAppConfig,\n\tloginWithAwsCognitoIdentityPool,\n\trefreshIdAndAccessTokens,\n\tloginWithAuthorizationCode,\n\tinitialUserState,\n};\n","import {\n\tcreateContext,\n\tuseCallback,\n\tuseContext,\n\tuseEffect,\n\tuseRef,\n\tuseState,\n} from \"react\";\nimport type { PropsWithChildren } from \"react\";\nimport {\n\tloginWithAuthorizationCode as _loginWithAuthorizationCode,\n\tloginWithAwsCognitoIdentityPool as _loginWithAwsCognitoIdentityPool,\n\tlogoff as _logoff,\n\trefreshIdAndAccessTokens as _refreshIdAndAccessTokens,\n\tsetAppConfig as _setAppConfig,\n\tinitialUserState,\n} from \"./core/authentication\";\nimport type { LoginState } from \"./core/authentication\";\n\nimport type { CognitoIdentityCredentialProvider } from \"@aws-sdk/credential-provider-cognito-identity\";\nimport useAppConfig from \"./AppConfigContext\";\n\ntype UserContextValue = {\n\tawsCredentials: undefined | CognitoIdentityCredentialProvider;\n\tuser: {\n\t\tidentityId: undefined | string;\n\t\tid: undefined | string;\n\t\tname: undefined | string;\n\t\temail: undefined | string;\n\t\tgroups: undefined | string[];\n\t\tidToken: undefined | string;\n\t\taccessToken: undefined | string;\n\t};\n\tawsConfig:\n\t\t| undefined\n\t\t| {\n\t\t\t\tregion: undefined | string;\n\t\t\t\tcredentials: undefined | CognitoIdentityCredentialProvider;\n\t\t  };\n\n\tloginAnonymously: () => void;\n\tloginWithAuthorizationCode: (authorizationCode: string) => Promise<void>;\n\tlogoff: () => Promise<void>;\n};\n\nconst initialUserContextValue = {\n\tuser: initialUserState.user,\n\tawsConfig: initialUserState.awsConfig,\n\tawsCredentials: initialUserState.awsCredentials,\n\tloginAnonymously: () => {},\n\tloginWithAuthorizationCode: () => Promise.reject(),\n\tlogoff: () => Promise.reject(),\n};\n\nconst UserContext = createContext<UserContextValue>(initialUserContextValue);\n\nconst useSetInterval = (callback: () => void, seconds: number) => {\n\tconst intervalRef = useRef<NodeJS.Timeout>();\n\tconst cancel = useCallback(() => {\n\t\tconst interval = intervalRef.current;\n\t\tif (interval) {\n\t\t\tintervalRef.current = undefined;\n\t\t\tclearInterval(interval);\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tintervalRef.current = setInterval(callback, seconds);\n\t\treturn cancel;\n\t}, [callback, seconds, cancel]);\n\n\treturn cancel;\n};\n\nconst REFRESH_TOKEN_INTERVAL = 25 * 60000;\n\nconst UserProvider = ({ children }: PropsWithChildren) => {\n\tconst { appConfig } = useAppConfig();\n\tconst { appMessages } = appConfig;\n\n\tconst [userState, setUserState] = useState<LoginState>(initialUserState);\n\n\tuseEffect(() => {\n\t\t_setAppConfig(setUserState, appConfig);\n\t}, [appConfig]);\n\n\tconst logoff = useCallback(\n\t\t() => _logoff(setUserState, appConfig),\n\t\t[appConfig],\n\t);\n\n\tconst loginWithAwsCognitoIdentityPool = useCallback(\n\t\t(idToken: string | undefined, accessToken: string | undefined) =>\n\t\t\t_loginWithAwsCognitoIdentityPool(\n\t\t\t\tsetUserState,\n\t\t\t\tappConfig,\n\t\t\t\tidToken,\n\t\t\t\taccessToken,\n\t\t\t),\n\t\t[appConfig],\n\t);\n\n\tconst refreshIdAndAccessTokens = useCallback(\n\t\t() =>\n\t\t\t_refreshIdAndAccessTokens(\n\t\t\t\tsetUserState,\n\t\t\t\tappConfig,\n\t\t\t\tuserState.refreshToken,\n\t\t\t),\n\t\t[appConfig, userState.refreshToken],\n\t);\n\n\tconst scheduledRefreshIdAndAccessTokens = useCallback(() => {\n\t\trefreshIdAndAccessTokens().catch(() => {\n\t\t\tconsole.warn(appMessages.LOG_COULD_NOT_REFRESH_TOKENS);\n\t\t});\n\t}, [refreshIdAndAccessTokens, appMessages]);\n\n\tuseSetInterval(scheduledRefreshIdAndAccessTokens, REFRESH_TOKEN_INTERVAL);\n\n\tconst loginAnonymously = useCallback(\n\t\t() => loginWithAwsCognitoIdentityPool(undefined, undefined),\n\t\t[loginWithAwsCognitoIdentityPool],\n\t);\n\n\tconst loginWithAuthorizationCode = useCallback(\n\t\t(authorizationCode: string) =>\n\t\t\t_loginWithAuthorizationCode(setUserState, appConfig, authorizationCode),\n\t\t[appConfig],\n\t);\n\n\tuseEffect(() => {\n\t\tif (!userState.awsCredentials) {\n\t\t\trefreshIdAndAccessTokens().catch(() => {\n\t\t\t\tconsole.warn(appMessages.LOG_COULD_NOT_REFRESH_TOKENS);\n\t\t\t});\n\t\t}\n\t}, [userState.awsCredentials, refreshIdAndAccessTokens, appMessages]);\n\n\treturn (\n\t\t<UserContext.Provider\n\t\t\tvalue={{\n\t\t\t\tuser: userState.user,\n\t\t\t\tawsConfig: userState.awsConfig,\n\t\t\t\tawsCredentials: userState.awsCredentials,\n\t\t\t\tloginAnonymously,\n\t\t\t\tloginWithAuthorizationCode,\n\t\t\t\tlogoff,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</UserContext.Provider>\n\t);\n};\n\nconst useUser = () => {\n\tconst {\n\t\tuser,\n\t\tawsConfig,\n\t\tawsCredentials,\n\t\tloginAnonymously,\n\t\tloginWithAuthorizationCode,\n\t\tlogoff,\n\t} = useContext(UserContext);\n\n\treturn {\n\t\tuser,\n\t\tawsConfig,\n\t\tawsCredentials,\n\t\tloginAnonymously,\n\t\tloginWithAuthorizationCode,\n\t\tlogoff,\n\t};\n};\n\nexport default useUser;\nexport { UserProvider };\n","import { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";\nimport {\n\tDynamoDBDocumentClient,\n\tGetCommand,\n\tPutCommand,\n\tUpdateCommand,\n} from \"@aws-sdk/lib-dynamodb\";\nimport type {\n\tGetCommandInput,\n\tGetCommandOutput,\n\tPutCommandInput,\n\tPutCommandOutput,\n\tUpdateCommandInput,\n\tUpdateCommandOutput,\n} from \"@aws-sdk/lib-dynamodb\";\nimport {\n\tcreateContext,\n\tuseCallback,\n\tuseContext,\n\tuseEffect,\n\tuseState,\n} from \"react\";\nimport type { PropsWithChildren } from \"react\";\n\nimport useUser from \"./UserContext\";\n\ntype DDBContextValue = {\n\tdocumentDB?: DynamoDBDocumentClient;\n};\n\nconst DDBContext = createContext<DDBContextValue>({\n\tdocumentDB: undefined,\n});\n\nconst DDBProvider = ({ children }: PropsWithChildren) => {\n\tconst { awsConfig, awsCredentials } = useUser();\n\tconst [documentDB, setDocumentDB] = useState<DynamoDBDocumentClient>();\n\n\tuseEffect(() => {\n\t\tif (awsConfig) {\n\t\t\tconst ddbClient = new DynamoDBClient(awsConfig);\n\t\t\tsetDocumentDB(DynamoDBDocumentClient.from(ddbClient));\n\t\t} else {\n\t\t\tsetDocumentDB(undefined);\n\t\t}\n\t}, [awsConfig]);\n\n\tuseEffect(() => {\n\t\tif (awsCredentials) {\n\t\t\tsetDocumentDB((oldDocumentDB) => {\n\t\t\t\tif (oldDocumentDB) {\n\t\t\t\t\toldDocumentDB.config.credentials = awsCredentials;\n\t\t\t\t}\n\t\t\t\treturn oldDocumentDB;\n\t\t\t});\n\t\t}\n\t}, [awsCredentials]);\n\n\treturn (\n\t\t<DDBContext.Provider value={{ documentDB }}>{children}</DDBContext.Provider>\n\t);\n};\n\nconst useDDB = () => {\n\tconst { documentDB } = useContext(DDBContext);\n\n\tconst ddbGet = useCallback(\n\t\t(params: GetCommandInput) =>\n\t\t\tdocumentDB\n\t\t\t\t? documentDB.send(new GetCommand(params))\n\t\t\t\t: Promise.reject<GetCommandOutput>(),\n\t\t[documentDB],\n\t);\n\n\tconst ddbPut = useCallback(\n\t\t(params: PutCommandInput) =>\n\t\t\tdocumentDB\n\t\t\t\t? documentDB.send(new PutCommand(params))\n\t\t\t\t: Promise.reject<PutCommandOutput>(),\n\t\t[documentDB],\n\t);\n\n\tconst ddbUpdate = useCallback(\n\t\t(params: UpdateCommandInput) =>\n\t\t\tdocumentDB\n\t\t\t\t? documentDB.send(new UpdateCommand(params))\n\t\t\t\t: Promise.reject<UpdateCommandOutput>(),\n\t\t[documentDB],\n\t);\n\n\treturn {\n\t\tdocumentDB,\n\t\tddbGet,\n\t\tddbPut,\n\t\tddbUpdate,\n\t};\n};\n\nexport default useDDB;\nexport { DDBProvider };\n","import { InvokeCommand, LambdaClient } from \"@aws-sdk/client-lambda\";\nimport type { InvokeCommandInput } from \"@aws-sdk/client-lambda\";\nimport {\n\tcreateContext,\n\tuseCallback,\n\tuseContext,\n\tuseEffect,\n\tuseState,\n} from \"react\";\nimport type { PropsWithChildren } from \"react\";\n\nimport useUser from \"./UserContext\";\n\ntype LambdaContextValue = {\n\tinvokeLambda: (functionName: string, payload: object) => Promise<object>;\n};\n\nconst LambdaContext = createContext<LambdaContextValue>({\n\tinvokeLambda: (_functionName, _payload) => Promise.reject(),\n});\n\nconst LambdaProvider = ({ children }: PropsWithChildren) => {\n\tconst {\n\t\tuser: { accessToken },\n\t\tawsConfig,\n\t\tawsCredentials,\n\t} = useUser();\n\tconst [lambda, setLambda] = useState<LambdaClient>();\n\n\tuseEffect(() => {\n\t\tif (awsConfig) {\n\t\t\tsetLambda(new LambdaClient(awsConfig));\n\t\t} else {\n\t\t\tsetLambda(undefined);\n\t\t}\n\t}, [awsConfig]);\n\n\tuseEffect(() => {\n\t\tif (awsCredentials) {\n\t\t\tsetLambda((oldLambda) => {\n\t\t\t\tif (oldLambda) {\n\t\t\t\t\toldLambda.config.credentials = awsCredentials;\n\t\t\t\t}\n\t\t\t\treturn oldLambda;\n\t\t\t});\n\t\t}\n\t}, [awsCredentials]);\n\n\tconst invokeLambda = useCallback(\n\t\t(functionName: string, payload: object) => {\n\t\t\tif (lambda) {\n\t\t\t\tconst encoder = new TextEncoder();\n\t\t\t\tconst decoder = new TextDecoder();\n\t\t\t\tconst params: InvokeCommandInput = {\n\t\t\t\t\tFunctionName: functionName,\n\t\t\t\t\tClientContext: btoa(JSON.stringify({ custom: { accessToken } })),\n\t\t\t\t\tPayload: payload\n\t\t\t\t\t\t? encoder.encode(JSON.stringify(payload))\n\t\t\t\t\t\t: undefined,\n\t\t\t\t};\n\t\t\t\tconst command = new InvokeCommand(params);\n\t\t\t\treturn new Promise<object>((resolve, reject) => {\n\t\t\t\t\tlambda\n\t\t\t\t\t\t.send(command)\n\t\t\t\t\t\t.then((data) => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!data.StatusCode ||\n\t\t\t\t\t\t\t\tdata.StatusCode !== 200 ||\n\t\t\t\t\t\t\t\t!data.Payload\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treject(data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst responsePayload = JSON.parse(decoder.decode(data.Payload));\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!responsePayload ||\n\t\t\t\t\t\t\t\t!responsePayload.statusCode ||\n\t\t\t\t\t\t\t\tresponsePayload.statusCode !== 200\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treject(data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresolve(responsePayload.body);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn Promise.reject(\"Lambda client is undefined\");\n\t\t},\n\t\t[lambda, accessToken],\n\t);\n\n\treturn (\n\t\t<LambdaContext.Provider\n\t\t\tvalue={{\n\t\t\t\tinvokeLambda: lambda ? invokeLambda : () => Promise.reject(),\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</LambdaContext.Provider>\n\t);\n};\n\nconst useLambda = () => {\n\tconst { invokeLambda } = useContext(LambdaContext);\n\n\treturn { invokeLambda };\n};\n\nexport default useLambda;\nexport { LambdaProvider };\n","import {\n\tcreateContext,\n\tuseCallback,\n\tuseContext,\n\tuseEffect,\n\tuseState,\n} from \"react\";\nimport type { PropsWithChildren } from \"react\";\ntype MessageContextValue = {\n\tmessage: string | undefined;\n\tshowMessage: (message: string) => void;\n\tdismissMessage: () => void;\n};\n\nconst MessageContext = createContext<MessageContextValue>({\n\tmessage: \"\",\n\tshowMessage: (_message: string) => {},\n\tdismissMessage: () => {},\n});\n\nconst MessageProvider = ({ children }: PropsWithChildren) => {\n\tconst [snackPack, setSnackPack] = useState<string[]>([]);\n\tconst [message, setMessage] = useState<string>();\n\n\tuseEffect(() => {\n\t\tif (snackPack.length && !message) {\n\t\t\tsetMessage(snackPack[0]);\n\t\t\tsetSnackPack((prev) => prev.slice(1));\n\t\t}\n\t}, [snackPack, message]);\n\n\tconst showMessage = useCallback((newMessage: string) => {\n\t\tsetSnackPack((prev) => [...prev, newMessage]);\n\t}, []);\n\n\tconst dismissMessage = useCallback(() => {\n\t\tsetMessage(undefined);\n\t}, []);\n\n\treturn (\n\t\t<MessageContext.Provider value={{ message, showMessage, dismissMessage }}>\n\t\t\t{children}\n\t\t</MessageContext.Provider>\n\t);\n};\n\nconst useMessage = () => {\n\tconst { showMessage } = useContext(MessageContext);\n\n\treturn { showMessage };\n};\n\nconst useMessageAreaState = () => {\n\tconst { message, dismissMessage } = useContext(MessageContext);\n\n\treturn { message, dismissMessage };\n};\n\nexport default useMessage;\nexport { MessageProvider, useMessageAreaState };\n","import { createContext, useCallback, useContext, useState } from \"react\";\nimport type { PropsWithChildren } from \"react\";\ntype SpinnerContextValue = {\n\tshowSpinner: () => void;\n\tdismissSpinner: () => void;\n\tshowing: boolean;\n};\n\nconst SpinnerContext = createContext<SpinnerContextValue>({\n\tshowSpinner: () => {},\n\tdismissSpinner: () => {},\n\tshowing: false,\n});\n\nconst SpinnerProvider = ({ children }: PropsWithChildren) => {\n\tconst [spinnerCount, setSpinnerCount] = useState(0);\n\n\tconst showSpinner = useCallback(() => {\n\t\tsetSpinnerCount((prev) => prev + 1);\n\t}, []);\n\n\tconst dismissSpinner = useCallback(() => {\n\t\tsetSpinnerCount((prev) => prev - 1);\n\t}, []);\n\n\tconst showing = spinnerCount > 0;\n\n\treturn (\n\t\t<SpinnerContext.Provider value={{ showSpinner, dismissSpinner, showing }}>\n\t\t\t{children}\n\t\t</SpinnerContext.Provider>\n\t);\n};\n\nconst useSpinner = () => {\n\tconst { showSpinner, dismissSpinner } = useContext(SpinnerContext);\n\n\treturn { showSpinner, dismissSpinner };\n};\n\nconst useSpinnerAreaState = () => {\n\tconst { showing } = useContext(SpinnerContext);\n\n\treturn { showing };\n};\n\nexport default useSpinner;\nexport { SpinnerProvider, useSpinnerAreaState };\n","import type { PropsWithChildren } from \"react\";\n\nimport { AppConfigProvider } from \"./AppConfigContext\";\nimport { DDBProvider } from \"./DDBContext\";\nimport { LambdaProvider } from \"./LambdaContext\";\nimport { MessageProvider } from \"./MessageContext\";\nimport { SpinnerProvider } from \"./SpinnerContext\";\nimport { UserProvider } from \"./UserContext\";\nimport type { AppConfig } from \"./core/makeAppConfig\";\n\ntype InfrastructureProviderProps = PropsWithChildren<{\n\tappConfig: AppConfig;\n}>;\n\nconst InfrastructureProvider = ({\n\tappConfig,\n\tchildren,\n}: InfrastructureProviderProps) => (\n\t<MessageProvider>\n\t\t<SpinnerProvider>\n\t\t\t<AppConfigProvider appConfig={appConfig}>\n\t\t\t\t<UserProvider>\n\t\t\t\t\t<DDBProvider>\n\t\t\t\t\t\t<LambdaProvider>{children}</LambdaProvider>\n\t\t\t\t\t</DDBProvider>\n\t\t\t\t</UserProvider>\n\t\t\t</AppConfigProvider>\n\t\t</SpinnerProvider>\n\t</MessageProvider>\n);\n\nexport default InfrastructureProvider;\n","import type { AppMessages } from \"./makeAppConfig\";\n\nconst authRedirect = (\n\tappBasePath: string | undefined,\n\tshowSpinner: () => void,\n\tdismissSpinner: () => void,\n\tloginWithAuthorizationCode: (authorizationCode: string) => Promise<void>,\n\tshowMessage: (message: string) => void,\n\tappMessages: AppMessages | undefined,\n) => {\n\tif (window.location.pathname === appBasePath) {\n\t\tconst search = new URLSearchParams(window.location.search);\n\t\tif (search.get(\"auth-redirect\") !== null && search.get(\"code\") !== null) {\n\t\t\twindow.history.replaceState({}, \"\", window.location.pathname);\n\t\t\tconst authorizationCode = search.get(\"code\");\n\n\t\t\tif (authorizationCode) {\n\t\t\t\tshowSpinner();\n\t\t\t\tloginWithAuthorizationCode(authorizationCode)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tif (appMessages) {\n\t\t\t\t\t\t\tshowMessage(appMessages.LOGIN_SUCCESSFUL);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\tif (appMessages) {\n\t\t\t\t\t\t\tshowMessage(appMessages.LOGIN_FAILED);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.finally(() => {\n\t\t\t\t\t\tdismissSpinner();\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport default authRedirect;\n","import { useEffect } from \"react\";\nimport useAppConfig from \"./AppConfigContext\";\nimport useMessage from \"./MessageContext\";\nimport useSpinner from \"./SpinnerContext\";\nimport useUser from \"./UserContext\";\nimport authRedirect from \"./core/authRedirect\";\n\nconst useAuthRedirect = () => {\n\tconst {\n\t\tappConfig: { appBasePath, appMessages },\n\t} = useAppConfig();\n\n\tconst { showMessage } = useMessage();\n\tconst { showSpinner, dismissSpinner } = useSpinner();\n\tconst { loginWithAuthorizationCode } = useUser();\n\n\tuseEffect(() => {\n\t\tauthRedirect(\n\t\t\tappBasePath,\n\t\t\tshowSpinner,\n\t\t\tdismissSpinner,\n\t\t\tloginWithAuthorizationCode,\n\t\t\tshowMessage,\n\t\t\tappMessages,\n\t\t);\n\t}, [\n\t\tappBasePath,\n\t\tshowSpinner,\n\t\tdismissSpinner,\n\t\tloginWithAuthorizationCode,\n\t\tshowMessage,\n\t\tappMessages,\n\t]);\n};\n\nexport default useAuthRedirect;\n","import type { PropsWithChildren } from \"react\";\nimport { HashRouter, Route, Routes } from \"react-router-dom\";\n\nimport InfrastructureProvider from \"./InfrastructureProvider\";\nimport type { AppConfig } from \"./core/makeAppConfig\";\nimport useAuthRedirect from \"./useAuthRedirect\";\n\nconst RedirectAuthCode = () => {\n\tuseAuthRedirect();\n\treturn null;\n};\n\ntype AppRoute = {\n\tname: string;\n\tlabel: string;\n\tpath: string;\n\thideFromMenu: boolean;\n\tcomponent: () => JSX.Element;\n\toptions: { exact?: boolean };\n\tauthorizedGroups?: string[];\n};\n\ntype BaseAppScopeProps = PropsWithChildren<{\n\tappConfig: AppConfig;\n\troutes: AppRoute[];\n}>;\n\nconst BaseAppScope = ({ appConfig, routes, children }: BaseAppScopeProps) => (\n\t<InfrastructureProvider appConfig={appConfig}>\n\t\t<RedirectAuthCode />\n\t\t<HashRouter>\n\t\t\t{children}\n\t\t\t<Routes>\n\t\t\t\t{routes.map((route) => (\n\t\t\t\t\t<Route\n\t\t\t\t\t\tkey={`${route.name}-route`}\n\t\t\t\t\t\texact={true}\n\t\t\t\t\t\tpath={route.path}\n\t\t\t\t\t\telement={<route.component />}\n\t\t\t\t\t\t{...route.options}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</Routes>\n\t\t</HashRouter>\n\t</InfrastructureProvider>\n);\n\nexport default BaseAppScope;\n\nexport type { AppRoute };\n","type AppMessages = {\n\tLOGIN_SUCCESSFUL: string;\n\tLOGIN_FAILED: string;\n\tLOGOUT_SUCCESSFUL: string;\n\tLOGOUT_FAILED: string;\n\tLOGGED_OUT_USER: string;\n\tLOG_COULD_NOT_LOGIN_WITH_REFRESHED_TOKENS: string;\n\tLOG_COULD_NOT_DECODE_AUTHENTICATION_RESPONSE: string;\n\tLOG_COULD_NOT_GET_REFRESHED_TOKENS: string;\n\tLOG_COULD_NOT_REFRESH_TOKENS: string;\n\tLOG_NO_REFRESH_TOKEN_AVAILABLE: string;\n\tLOG_COULD_NOT_GET_IDENTIFICATION_TOKENS: string;\n};\n\ntype AppConfig = {\n\tappBasePath: string;\n\tappAuthUrl: string;\n\tappClientId: string;\n\tappAuthRedirect: string;\n\tappExternalLoginUrl: string;\n\tappIdentityPoolId: string;\n\tappRegion: string;\n\tappUserPoolId: string;\n\tappLogoUrl: string;\n\tappMessages: AppMessages;\n\thideLogin: boolean;\n\tappRefreshTokenStorageKey: string;\n};\n\ntype MakeAppConfigParam = {\n\tappHost: string;\n\tappBasePath: string;\n\tappRegion: string;\n\tappUserPoolId: string;\n\tappUserPoolDomain: string;\n\tappClientId: string;\n\tappIdentityPoolId: string;\n\tappRefreshTokenStorageKey: string;\n\tappLogoUrl: string;\n\tappMessages: AppMessages;\n\thideLogin?: boolean;\n};\n\nconst makeAppConfig = ({\n\tappHost,\n\tappBasePath,\n\tappRegion,\n\tappUserPoolId,\n\tappUserPoolDomain,\n\tappClientId,\n\tappIdentityPoolId,\n\tappRefreshTokenStorageKey,\n\tappLogoUrl,\n\tappMessages,\n\thideLogin,\n}: MakeAppConfigParam): AppConfig => {\n\tconst appBaseAuthUrl = `https://${appUserPoolDomain}.auth.${appRegion}.amazoncognito.com`;\n\tconst appAuthRedirect = `${appHost}${appBasePath}?auth-redirect`;\n\tconst appAuthUrl = `${appBaseAuthUrl}/oauth2/token`;\n\tconst appExternalLoginUrl = `${appBaseAuthUrl}/login?client_id=${appClientId}&response_type=code&scope=email+openid+profile&redirect_uri=${appAuthRedirect}`;\n\n\treturn {\n\t\tappBasePath,\n\t\tappRegion,\n\t\tappUserPoolId,\n\t\tappClientId,\n\t\tappIdentityPoolId,\n\t\tappAuthRedirect,\n\t\tappAuthUrl,\n\t\tappExternalLoginUrl,\n\t\tappRefreshTokenStorageKey,\n\t\tappLogoUrl,\n\t\tappMessages,\n\t\thideLogin: hideLogin || false,\n\t};\n};\n\nexport default makeAppConfig;\n\nexport type { AppMessages, AppConfig };\n","import { useLocation } from \"react-router-dom\";\n\nimport useAppConfig from \"./AppConfigContext\";\nimport type { AppRoute } from \"./BaseAppScope\";\nimport useMessage from \"./MessageContext\";\nimport useUser from \"./UserContext\";\n\nconst useAppBarState = (routes: AppRoute[]) => {\n\tconst {\n\t\tappConfig: { appMessages, hideLogin, appExternalLoginUrl },\n\t} = useAppConfig();\n\tconst { showMessage } = useMessage();\n\tconst {\n\t\tuser: { name: userName },\n\t\tlogoff,\n\t} = useUser();\n\n\tconst location = useLocation();\n\n\tconst logoffAndShowMessage = () => {\n\t\tlogoff()\n\t\t\t.then(() => showMessage(appMessages.LOGOUT_SUCCESSFUL))\n\t\t\t.catch(() => showMessage(appMessages.LOGOUT_FAILED));\n\t};\n\n\tconst currentRoute = routes.find((route) => route.path === location.pathname);\n\tconst currentRouteLabel = currentRoute ? currentRoute.label : \"\";\n\n\tconst hideLoginButton = !!userName || hideLogin;\n\tconst hideAccountButton = !userName || hideLogin;\n\n\treturn {\n\t\tcurrentRouteLabel,\n\t\thideLoginButton,\n\t\tappExternalLoginUrl,\n\t\thideAccountButton,\n\t\tuserName,\n\t\tlogoffAndShowMessage,\n\t};\n};\n\nexport default useAppBarState;\n","import useAppConfig from \"./AppConfigContext\";\nimport type { AppRoute } from \"./BaseAppScope\";\nimport useUser from \"./UserContext\";\n\nconst useAppDrawerState = (routes: AppRoute[]) => {\n\tconst {\n\t\tappConfig: { appLogoUrl },\n\t} = useAppConfig();\n\tconst {\n\t\tuser: { groups: userGroups },\n\t} = useUser();\n\n\tconst userFromAuthorizedGroup = (authorizedGroups: string[] | undefined) => {\n\t\tif (!authorizedGroups) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!userGroups) {\n\t\t\treturn false;\n\t\t}\n\t\treturn authorizedGroups.some((authorizedGroup) =>\n\t\t\tuserGroups.includes(authorizedGroup),\n\t\t);\n\t};\n\n\tconst menuRoutes = routes\n\t\t.filter((route) => !route.hideFromMenu)\n\t\t.filter((route) => userFromAuthorizedGroup(route.authorizedGroups));\n\n\treturn { appLogoUrl, menuRoutes };\n};\n\nexport default useAppDrawerState;\n"],"names":["AppConfigContext","createContext","AppConfigProvider","appConfig","children","jsx","useAppConfig","ctx","useContext","initialUserState","getRefreshTokenFromSessionStorage","appRefreshTokenStorageKey","updateRefreshTokenInSessionStorage","refreshToken","stateUpdateFromClearAwsCredentials","stateUpdateFromFailedLogin","stateUpdateFromNewAwsCredentials","awsCredentials","identityId","idToken","accessToken","appMessages","appRegion","idTokenPayload","user","loginWithAwsCognitoIdentityPoolSemDispatch","appIdentityPoolId","appUserPoolId","newCredentials","fromCognitoIdentityPool","CognitoIdentityClient","resolve","reject","creds","err","refreshIdAndAccessTokensSemDispatch","appAuthUrl","appClientId","response","res","stateUpdate","loginWithAuthorizationCodeSemDispatch","authorizationCode","appAuthRedirect","logoff","setUserState","_reject","_prevState","setAppConfig","refreshIdAndAccessTokens","loginWithAwsCognitoIdentityPool","oldState","prevState","loginWithAuthorizationCode","initialUserContextValue","UserContext","useSetInterval","callback","seconds","intervalRef","useRef","cancel","useCallback","interval","useEffect","REFRESH_TOKEN_INTERVAL","UserProvider","userState","useState","_setAppConfig","_logoff","_loginWithAwsCognitoIdentityPool","_refreshIdAndAccessTokens","scheduledRefreshIdAndAccessTokens","loginAnonymously","_loginWithAuthorizationCode","useUser","awsConfig","DDBContext","DDBProvider","documentDB","setDocumentDB","ddbClient","DynamoDBClient","DynamoDBDocumentClient","oldDocumentDB","useDDB","ddbGet","params","GetCommand","ddbPut","PutCommand","ddbUpdate","UpdateCommand","LambdaContext","_functionName","_payload","LambdaProvider","lambda","setLambda","LambdaClient","oldLambda","invokeLambda","functionName","payload","encoder","decoder","command","InvokeCommand","data","responsePayload","useLambda","MessageContext","_message","MessageProvider","snackPack","setSnackPack","message","setMessage","prev","showMessage","newMessage","dismissMessage","useMessage","useMessageAreaState","SpinnerContext","SpinnerProvider","spinnerCount","setSpinnerCount","showSpinner","dismissSpinner","showing","useSpinner","useSpinnerAreaState","InfrastructureProvider","authRedirect","appBasePath","search","useAuthRedirect","RedirectAuthCode","BaseAppScope","routes","jsxs","HashRouter","Routes","route","Route","makeAppConfig","appHost","appUserPoolDomain","appLogoUrl","hideLogin","appBaseAuthUrl","appExternalLoginUrl","useAppBarState","userName","location","useLocation","logoffAndShowMessage","currentRoute","useAppDrawerState","userGroups","userFromAuthorizedGroup","authorizedGroups","authorizedGroup","menuRoutes"],"mappings":"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"}