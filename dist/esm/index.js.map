{
  "version": 3,
  "sources": ["../../src/AppConfigContext.tsx", "../../src/BaseAppScope.tsx", "../../src/InfrastructureProvider.tsx", "../../src/DDBContext.tsx", "../../src/UserContext.tsx", "../../src/core/authentication.ts", "../../src/LambdaContext.tsx", "../../src/MessageContext.tsx", "../../src/SpinnerContext.tsx", "../../src/useAuthRedirect.ts", "../../src/core/authRedirect.ts", "../../src/core/makeAppConfig.ts", "../../src/useAppBarState.ts", "../../src/useAppDrawerState.ts"],
  "sourcesContent": ["import React, { createContext, useContext } from \"react\";\nimport type { PropsWithChildren } from \"react\";\nimport type { AppConfig } from \"./core/makeAppConfig\";\n\ntype AppConfigContextValue =\n\t| {\n\t\t\tappConfig: AppConfig;\n\t  }\n\t| undefined;\n\nconst AppConfigContext = createContext<AppConfigContextValue>(undefined);\n\ntype AppConfigProviderProps = PropsWithChildren<{\n\tappConfig: AppConfig;\n}>;\n\nconst AppConfigProvider = ({ appConfig, children }: AppConfigProviderProps) => (\n\t<AppConfigContext.Provider value={{ appConfig }}>\n\t\t{children}\n\t</AppConfigContext.Provider>\n);\n\nconst useAppConfig = () => {\n\tconst ctx = useContext(AppConfigContext);\n\n\tif (ctx === undefined) {\n\t\tthrow new Error(\n\t\t\t\"useAppConfig can only be used in the scope of a AppConfigProvider\",\n\t\t);\n\t}\n\n\tconst { appConfig } = ctx;\n\treturn { appConfig };\n};\n\nexport default useAppConfig;\nexport { AppConfigProvider };\n", "import React from \"react\";\nimport type { PropsWithChildren } from \"react\";\nimport { HashRouter, Route, Routes } from \"react-router-dom\";\n\nimport InfrastructureProvider from \"./InfrastructureProvider\";\nimport type { AppConfig } from \"./core/makeAppConfig\";\nimport useAuthRedirect from \"./useAuthRedirect\";\n\nconst RedirectAuthCode = () => {\n\tuseAuthRedirect();\n\treturn null;\n};\n\ntype AppRoute = {\n\tname: string;\n\tlabel: string;\n\tpath: string;\n\thideFromMenu: boolean;\n\tcomponent: () => JSX.Element;\n\toptions: { exact?: boolean };\n\tauthorizedGroups?: string[];\n};\n\ntype BaseAppScopeProps = PropsWithChildren<{\n\tappConfig: AppConfig;\n\troutes: AppRoute[];\n}>;\n\nconst BaseAppScope = ({ appConfig, routes, children }: BaseAppScopeProps) => (\n\t<InfrastructureProvider appConfig={appConfig}>\n\t\t<RedirectAuthCode />\n\t\t<HashRouter>\n\t\t\t{children}\n\t\t\t<Routes>\n\t\t\t\t{routes.map((route) => (\n\t\t\t\t\t<Route\n\t\t\t\t\t\tkey={`${route.name}-route`}\n\t\t\t\t\t\texact={true}\n\t\t\t\t\t\tpath={route.path}\n\t\t\t\t\t\telement={<route.component />}\n\t\t\t\t\t\t{...route.options}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</Routes>\n\t\t</HashRouter>\n\t</InfrastructureProvider>\n);\n\nexport default BaseAppScope;\n\nexport type { AppRoute };\n", "import React from \"react\";\nimport type { PropsWithChildren } from \"react\";\n\nimport { AppConfigProvider } from \"./AppConfigContext\";\nimport { DDBProvider } from \"./DDBContext\";\nimport { LambdaProvider } from \"./LambdaContext\";\nimport { MessageProvider } from \"./MessageContext\";\nimport { SpinnerProvider } from \"./SpinnerContext\";\nimport { UserProvider } from \"./UserContext\";\nimport type { AppConfig } from \"./core/makeAppConfig\";\n\ntype InfrastructureProviderProps = PropsWithChildren<{\n\tappConfig: AppConfig;\n}>;\n\nconst InfrastructureProvider = ({\n\tappConfig,\n\tchildren,\n}: InfrastructureProviderProps) => (\n\t<MessageProvider>\n\t\t<SpinnerProvider>\n\t\t\t<AppConfigProvider appConfig={appConfig}>\n\t\t\t\t<UserProvider>\n\t\t\t\t\t<DDBProvider>\n\t\t\t\t\t\t<LambdaProvider>{children}</LambdaProvider>\n\t\t\t\t\t</DDBProvider>\n\t\t\t\t</UserProvider>\n\t\t\t</AppConfigProvider>\n\t\t</SpinnerProvider>\n\t</MessageProvider>\n);\n\nexport default InfrastructureProvider;\n", "import React, {\n\tcreateContext,\n\tuseCallback,\n\tuseContext,\n\tuseEffect,\n\tuseState,\n} from \"react\";\n\nimport { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";\nimport {\n\tDynamoDBDocumentClient,\n\tGetCommand,\n\tPutCommand,\n\tUpdateCommand,\n} from \"@aws-sdk/lib-dynamodb\";\nimport type {\n\tGetCommandInput,\n\tGetCommandOutput,\n\tPutCommandInput,\n\tPutCommandOutput,\n\tUpdateCommandInput,\n\tUpdateCommandOutput,\n} from \"@aws-sdk/lib-dynamodb\";\n\nimport useUser from \"./UserContext\";\n\ntype DDBContextValue = {\n\tdocumentDB?: DynamoDBDocumentClient;\n};\n\nconst DDBContext = createContext<DDBContextValue>({\n\tdocumentDB: undefined,\n});\n\nconst DDBProvider = ({ children }) => {\n\tconst { awsConfig, awsCredentials } = useUser();\n\tconst [documentDB, setDocumentDB] = useState<DynamoDBDocumentClient>();\n\n\tuseEffect(() => {\n\t\tif (awsConfig) {\n\t\t\tconst ddbClient = new DynamoDBClient(awsConfig);\n\t\t\tsetDocumentDB(DynamoDBDocumentClient.from(ddbClient));\n\t\t} else {\n\t\t\tsetDocumentDB(undefined);\n\t\t}\n\t}, [awsConfig]);\n\n\tuseEffect(() => {\n\t\tif (awsCredentials) {\n\t\t\tsetDocumentDB((oldDocumentDB) => {\n\t\t\t\tif (oldDocumentDB) {\n\t\t\t\t\toldDocumentDB.config.credentials = awsCredentials;\n\t\t\t\t}\n\t\t\t\treturn oldDocumentDB;\n\t\t\t});\n\t\t}\n\t}, [awsCredentials]);\n\n\treturn (\n\t\t<DDBContext.Provider value={{ documentDB }}>{children}</DDBContext.Provider>\n\t);\n};\n\nconst useDDB = () => {\n\tconst { documentDB } = useContext(DDBContext);\n\n\tconst ddbGet = useCallback(\n\t\t(params: GetCommandInput) =>\n\t\t\tdocumentDB\n\t\t\t\t? documentDB.send(new GetCommand(params))\n\t\t\t\t: Promise.reject<GetCommandOutput>(),\n\t\t[documentDB],\n\t);\n\n\tconst ddbPut = useCallback(\n\t\t(params: PutCommandInput) =>\n\t\t\tdocumentDB\n\t\t\t\t? documentDB.send(new PutCommand(params))\n\t\t\t\t: Promise.reject<PutCommandOutput>(),\n\t\t[documentDB],\n\t);\n\n\tconst ddbUpdate = useCallback(\n\t\t(params: UpdateCommandInput) =>\n\t\t\tdocumentDB\n\t\t\t\t? documentDB.send(new UpdateCommand(params))\n\t\t\t\t: Promise.reject<UpdateCommandOutput>(),\n\t\t[documentDB],\n\t);\n\n\treturn {\n\t\tdocumentDB,\n\t\tddbGet,\n\t\tddbPut,\n\t\tddbUpdate,\n\t};\n};\n\nexport default useDDB;\nexport { DDBProvider };\n", "import React, {\n\tcreateContext,\n\tuseCallback,\n\tuseContext,\n\tuseEffect,\n\tuseState,\n\tuseRef,\n} from \"react\";\n\nimport {\n\tloginWithAuthorizationCode as _loginWithAuthorizationCode,\n\tloginWithAwsCognitoIdentityPool as _loginWithAwsCognitoIdentityPool,\n\tlogoff as _logoff,\n\trefreshIdAndAccessTokens as _refreshIdAndAccessTokens,\n\tsetAppConfig as _setAppConfig,\n\tinitialUserState,\n} from \"./core/authentication\";\nimport type { LoginState } from \"./core/authentication\";\n\nimport type { CognitoIdentityCredentialProvider } from \"@aws-sdk/credential-provider-cognito-identity\";\nimport useAppConfig from \"./AppConfigContext\";\n\ntype UserContextValue = {\n\tawsCredentials: undefined | CognitoIdentityCredentialProvider;\n\tuser: {\n\t\tidentityId: undefined | string;\n\t\tid: undefined | string;\n\t\tname: undefined | string;\n\t\temail: undefined | string;\n\t\tgroups: undefined | string[];\n\t\tidToken: undefined | string;\n\t\taccessToken: undefined | string;\n\t};\n\tawsConfig:\n\t\t| undefined\n\t\t| {\n\t\t\t\tregion: undefined | string;\n\t\t\t\tcredentials: undefined | CognitoIdentityCredentialProvider;\n\t\t  };\n\n\tloginAnonymously: () => void;\n\tloginWithAuthorizationCode: (authorizationCode: string) => Promise<void>;\n\tlogoff: () => Promise<void>;\n};\n\nconst initialUserContextValue = {\n\tuser: initialUserState.user,\n\tawsConfig: initialUserState.awsConfig,\n\tawsCredentials: initialUserState.awsCredentials,\n\tloginAnonymously: () => {},\n\tloginWithAuthorizationCode: () => Promise.reject(),\n\tlogoff: () => Promise.reject(),\n};\n\nconst UserContext = createContext<UserContextValue>(initialUserContextValue);\n\nconst useSetInterval = (callback: () => void, seconds: number) => {\n\tconst intervalRef = useRef<NodeJS.Timeout>();\n\tconst cancel = useCallback(() => {\n\t\tconst interval = intervalRef.current;\n\t\tif (interval) {\n\t\t\tintervalRef.current = undefined;\n\t\t\tclearInterval(interval);\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tintervalRef.current = setInterval(callback, seconds);\n\t\treturn cancel;\n\t}, [callback, seconds, cancel]);\n\n\treturn cancel;\n};\n\nconst REFRESH_TOKEN_INTERVAL = 25 * 60000;\n\nconst UserProvider = ({ children }) => {\n\tconst { appConfig } = useAppConfig();\n\tconst { appMessages } = appConfig;\n\n\tconst [userState, setUserState] = useState<LoginState>(initialUserState);\n\n\tuseEffect(() => {\n\t\t_setAppConfig(setUserState, appConfig);\n\t}, [appConfig]);\n\n\tconst logoff = useCallback(\n\t\t() => _logoff(setUserState, appConfig),\n\t\t[appConfig],\n\t);\n\n\tconst loginWithAwsCognitoIdentityPool = useCallback(\n\t\t(idToken: string | undefined, accessToken: string | undefined) =>\n\t\t\t_loginWithAwsCognitoIdentityPool(\n\t\t\t\tsetUserState,\n\t\t\t\tappConfig,\n\t\t\t\tidToken,\n\t\t\t\taccessToken,\n\t\t\t),\n\t\t[appConfig],\n\t);\n\n\tconst refreshIdAndAccessTokens = useCallback(\n\t\t() =>\n\t\t\t_refreshIdAndAccessTokens(\n\t\t\t\tsetUserState,\n\t\t\t\tappConfig,\n\t\t\t\tuserState.refreshToken,\n\t\t\t),\n\t\t[appConfig, userState.refreshToken],\n\t);\n\n\tconst scheduledRefreshIdAndAccessTokens = useCallback(() => {\n\t\trefreshIdAndAccessTokens().catch(() => {\n\t\t\tconsole.warn(appMessages.LOG_COULD_NOT_REFRESH_TOKENS);\n\t\t});\n\t}, [refreshIdAndAccessTokens, appMessages]);\n\n\tuseSetInterval(scheduledRefreshIdAndAccessTokens, REFRESH_TOKEN_INTERVAL);\n\n\tconst loginAnonymously = useCallback(\n\t\t() => loginWithAwsCognitoIdentityPool(undefined, undefined),\n\t\t[loginWithAwsCognitoIdentityPool],\n\t);\n\n\tconst loginWithAuthorizationCode = useCallback(\n\t\t(authorizationCode: string) =>\n\t\t\t_loginWithAuthorizationCode(setUserState, appConfig, authorizationCode),\n\t\t[appConfig],\n\t);\n\n\tuseEffect(() => {\n\t\tif (!userState.awsCredentials) {\n\t\t\trefreshIdAndAccessTokens().catch(() => {\n\t\t\t\tconsole.warn(appMessages.LOG_COULD_NOT_REFRESH_TOKENS);\n\t\t\t});\n\t\t}\n\t}, [userState.awsCredentials, refreshIdAndAccessTokens, appMessages]);\n\n\treturn (\n\t\t<UserContext.Provider\n\t\t\tvalue={{\n\t\t\t\tuser: userState.user,\n\t\t\t\tawsConfig: userState.awsConfig,\n\t\t\t\tawsCredentials: userState.awsCredentials,\n\t\t\t\tloginAnonymously,\n\t\t\t\tloginWithAuthorizationCode,\n\t\t\t\tlogoff,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</UserContext.Provider>\n\t);\n};\n\nconst useUser = () => {\n\tconst {\n\t\tuser,\n\t\tawsConfig,\n\t\tawsCredentials,\n\t\tloginAnonymously,\n\t\tloginWithAuthorizationCode,\n\t\tlogoff,\n\t} = useContext(UserContext);\n\n\treturn {\n\t\tuser,\n\t\tawsConfig,\n\t\tawsCredentials,\n\t\tloginAnonymously,\n\t\tloginWithAuthorizationCode,\n\t\tlogoff,\n\t};\n};\n\nexport default useUser;\nexport { UserProvider };\n", "import { CognitoIdentityClient } from \"@aws-sdk/client-cognito-identity\";\nimport {\n\ttype CognitoIdentityCredentialProvider,\n\tfromCognitoIdentityPool,\n} from \"@aws-sdk/credential-provider-cognito-identity\";\nimport type { AppConfig, AppMessages } from \"./makeAppConfig\";\n\nconst initialUserState = {\n\tappConfig: undefined,\n\tuser: {\n\t\tidentityId: undefined,\n\t\tid: undefined,\n\t\tname: undefined,\n\t\temail: undefined,\n\t\tgroups: undefined,\n\t\tidToken: undefined,\n\t\taccessToken: undefined,\n\t},\n\trefreshToken: undefined,\n\tawsConfig: undefined,\n\tawsCredentials: undefined,\n};\n\nconst getRefreshTokenFromSessionStorage = (appRefreshTokenStorageKey: string) =>\n\tsessionStorage.getItem(appRefreshTokenStorageKey);\n\nconst updateRefreshTokenInSessionStorage = (\n\trefreshToken: string | undefined,\n\tappRefreshTokenStorageKey: string,\n) => {\n\tif (refreshToken) {\n\t\tsessionStorage.setItem(appRefreshTokenStorageKey, refreshToken);\n\t} else {\n\t\tsessionStorage.removeItem(appRefreshTokenStorageKey);\n\t}\n};\n\ntype AwsCredentialsState = {\n\tawsCredentials: undefined | CognitoIdentityCredentialProvider;\n\tuser: {\n\t\tidentityId: undefined | string;\n\t\tid: undefined | string;\n\t\tname: undefined | string;\n\t\temail: undefined | string;\n\t\tgroups: undefined | string[];\n\t\tidToken: undefined | string;\n\t\taccessToken: undefined | string;\n\t};\n\tawsConfig:\n\t\t| undefined\n\t\t| {\n\t\t\t\tregion: undefined | string;\n\t\t\t\tcredentials: undefined | CognitoIdentityCredentialProvider;\n\t\t  };\n};\n\nexport type LoginState = AwsCredentialsState & {\n\trefreshToken: undefined | string;\n};\n\nconst stateUpdateFromClearAwsCredentials: AwsCredentialsState = {\n\tawsCredentials: undefined,\n\tuser: {\n\t\tidentityId: undefined,\n\t\tid: undefined,\n\t\tname: undefined,\n\t\temail: undefined,\n\t\tgroups: undefined,\n\t\tidToken: undefined,\n\t\taccessToken: undefined,\n\t},\n\tawsConfig: undefined,\n};\n\nconst stateUpdateFromFailedLogin: LoginState = {\n\t...stateUpdateFromClearAwsCredentials,\n\trefreshToken: undefined,\n};\n\nconst stateUpdateFromNewAwsCredentials = (\n\tawsCredentials: CognitoIdentityCredentialProvider,\n\tidentityId: string,\n\tidToken: string | undefined,\n\taccessToken: string | undefined,\n\tappMessages: AppMessages,\n\tappRegion: string,\n): AwsCredentialsState => {\n\tconst idTokenPayload = idToken && JSON.parse(atob(idToken.split(\".\")[1]));\n\tconst user = {\n\t\tidentityId,\n\t\tid: idTokenPayload?.sub,\n\t\tname: idTokenPayload ? idTokenPayload.name : appMessages.LOGGED_OUT_USER,\n\t\temail: idTokenPayload?.email,\n\t\tgroups: idTokenPayload?.[\"cognito:groups\"],\n\t\tidToken,\n\t\taccessToken,\n\t};\n\tconst awsConfig = awsCredentials\n\t\t? { region: appRegion, credentials: awsCredentials }\n\t\t: undefined;\n\n\treturn {\n\t\tawsCredentials,\n\t\tuser,\n\t\tawsConfig,\n\t};\n};\n\nconst loginWithAwsCognitoIdentityPoolSemDispatch = (\n\tappConfig: AppConfig,\n\tidToken?: string,\n\taccessToken?: string,\n): Promise<AwsCredentialsState> => {\n\tconst { appIdentityPoolId, appRegion, appUserPoolId, appMessages } =\n\t\tappConfig;\n\n\tconst newCredentials = fromCognitoIdentityPool({\n\t\tclient: new CognitoIdentityClient({\n\t\t\tregion: appRegion,\n\t\t}),\n\t\tidentityPoolId: appIdentityPoolId,\n\t\t...(idToken && { logins: { [appUserPoolId]: idToken } }),\n\t});\n\n\treturn new Promise((resolve, reject) => {\n\t\tnewCredentials()\n\t\t\t.then((creds) => {\n\t\t\t\tresolve(\n\t\t\t\t\tstateUpdateFromNewAwsCredentials(\n\t\t\t\t\t\tnewCredentials,\n\t\t\t\t\t\tcreds.identityId,\n\t\t\t\t\t\tidToken,\n\t\t\t\t\t\taccessToken,\n\t\t\t\t\t\tappMessages,\n\t\t\t\t\t\tappRegion,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\treject(err);\n\t\t\t});\n\t});\n};\n\nconst refreshIdAndAccessTokensSemDispatch = (\n\tappConfig: AppConfig,\n\trefreshToken?: string,\n): Promise<AwsCredentialsState> => {\n\tconst { appAuthUrl, appClientId, appMessages } = appConfig;\n\treturn new Promise((resolve, reject) => {\n\t\tif (refreshToken) {\n\t\t\tfetch(appAuthUrl, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n\t\t\t\tbody: `grant_type=refresh_token&client_id=${appClientId}&refresh_token=${refreshToken}`,\n\t\t\t})\n\t\t\t\t.then((response) => {\n\t\t\t\t\tresponse\n\t\t\t\t\t\t.json()\n\t\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\t\tloginWithAwsCognitoIdentityPoolSemDispatch(\n\t\t\t\t\t\t\t\tappConfig,\n\t\t\t\t\t\t\t\tres.id_token,\n\t\t\t\t\t\t\t\tres.access_token,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.then((stateUpdate) => {\n\t\t\t\t\t\t\t\t\tresolve(stateUpdate);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t\t\t\tappMessages.LOG_COULD_NOT_LOGIN_WITH_REFRESHED_TOKENS,\n\t\t\t\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t\tappMessages.LOG_COULD_NOT_DECODE_AUTHENTICATION_RESPONSE,\n\t\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tconsole.error(appMessages.LOG_COULD_NOT_GET_REFRESHED_TOKENS, err);\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t} else {\n\t\t\tconsole.warn(appMessages.LOG_NO_REFRESH_TOKEN_AVAILABLE);\n\t\t\treject(Error(appMessages.LOG_NO_REFRESH_TOKEN_AVAILABLE));\n\t\t}\n\t});\n};\n\nconst loginWithAuthorizationCodeSemDispatch = (\n\tappConfig: AppConfig,\n\tauthorizationCode: string,\n): Promise<LoginState> => {\n\tconst { appAuthUrl, appClientId, appAuthRedirect, appMessages } = appConfig;\n\treturn new Promise((resolve, reject) => {\n\t\tfetch(appAuthUrl, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n\t\t\tbody: `grant_type=authorization_code&client_id=${appClientId}&code=${authorizationCode}&redirect_uri=${appAuthRedirect}`,\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tresponse\n\t\t\t\t\t.json()\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\trefreshIdAndAccessTokensSemDispatch(appConfig, res.refresh_token)\n\t\t\t\t\t\t\t.then((stateUpdate) => {\n\t\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\t\t...stateUpdate,\n\t\t\t\t\t\t\t\t\trefreshToken: res.refresh_token,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t\t\tappMessages.LOG_COULD_NOT_LOGIN_WITH_REFRESHED_TOKENS,\n\t\t\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\tappMessages.LOG_COULD_NOT_DECODE_AUTHENTICATION_RESPONSE,\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.error(appMessages.LOG_COULD_NOT_GET_IDENTIFICATION_TOKENS, err);\n\t\t\t\treject(err);\n\t\t\t});\n\t});\n};\n\nconst logoff = (\n\tsetUserState: (action: (prevState: LoginState) => LoginState) => void,\n\tappConfig: AppConfig,\n): Promise<void> =>\n\tnew Promise((resolve, _reject) => {\n\t\tupdateRefreshTokenInSessionStorage(\n\t\t\tundefined,\n\t\t\tappConfig.appRefreshTokenStorageKey,\n\t\t);\n\t\tsetUserState((_prevState) => stateUpdateFromFailedLogin);\n\t\tresolve();\n\t});\n\nconst setAppConfig = (\n\tsetUserState: (action: (prevState: LoginState) => LoginState) => void,\n\tappConfig: AppConfig,\n) => {\n\tconst refreshToken = getRefreshTokenFromSessionStorage(\n\t\tappConfig.appRefreshTokenStorageKey,\n\t);\n\tif (refreshToken) {\n\t\trefreshIdAndAccessTokens(setUserState, appConfig, refreshToken);\n\t}\n};\n\nconst loginWithAwsCognitoIdentityPool = (\n\tsetUserState: (action: (prevState: LoginState) => LoginState) => void,\n\tappConfig: AppConfig,\n\tidToken?: string,\n\taccessToken?: string,\n): void => {\n\tloginWithAwsCognitoIdentityPoolSemDispatch(appConfig, idToken, accessToken)\n\t\t.then((stateUpdate) => {\n\t\t\tsetUserState((oldState: LoginState) => ({ ...oldState, stateUpdate }));\n\t\t})\n\t\t.catch(() => {\n\t\t\tsetUserState((_prevState) => stateUpdateFromFailedLogin);\n\t\t});\n};\n\nconst refreshIdAndAccessTokens = (\n\tsetUserState: (action: (prevState: LoginState) => LoginState) => void,\n\tappConfig: AppConfig,\n\trefreshToken?: string,\n): Promise<void> =>\n\tnew Promise((resolve, reject) => {\n\t\trefreshIdAndAccessTokensSemDispatch(appConfig, refreshToken)\n\t\t\t.then((stateUpdate) => {\n\t\t\t\tsetUserState((prevState) => ({ ...prevState, ...stateUpdate }));\n\t\t\t\tresolve();\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tsetUserState((_prevState) => stateUpdateFromFailedLogin);\n\t\t\t\treject(err);\n\t\t\t});\n\t});\n\nconst loginWithAuthorizationCode = (\n\tsetUserState: (action: (prevState: LoginState) => LoginState) => void,\n\tappConfig: AppConfig,\n\tauthorizationCode: string,\n): Promise<void> =>\n\tnew Promise((resolve, reject) => {\n\t\tloginWithAuthorizationCodeSemDispatch(appConfig, authorizationCode)\n\t\t\t.then((stateUpdate) => {\n\t\t\t\tconst { refreshToken } = stateUpdate;\n\t\t\t\tupdateRefreshTokenInSessionStorage(\n\t\t\t\t\trefreshToken,\n\t\t\t\t\tappConfig.appRefreshTokenStorageKey,\n\t\t\t\t);\n\t\t\t\tsetUserState((_prevState) => stateUpdate);\n\t\t\t\tresolve();\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconst refreshToken = undefined;\n\t\t\t\tupdateRefreshTokenInSessionStorage(\n\t\t\t\t\trefreshToken,\n\t\t\t\t\tappConfig.appRefreshTokenStorageKey,\n\t\t\t\t);\n\t\t\t\tsetUserState((_prevState) => stateUpdateFromFailedLogin);\n\t\t\t\treject(err);\n\t\t\t});\n\t});\n\nexport {\n\tlogoff,\n\tsetAppConfig,\n\tloginWithAwsCognitoIdentityPool,\n\trefreshIdAndAccessTokens,\n\tloginWithAuthorizationCode,\n\tinitialUserState,\n};\n", "import React, {\n\tcreateContext,\n\tuseCallback,\n\tuseContext,\n\tuseEffect,\n\tuseState,\n} from \"react\";\n\nimport { InvokeCommand, LambdaClient } from \"@aws-sdk/client-lambda\";\nimport type { InvokeCommandInput } from \"@aws-sdk/client-lambda\";\n\nimport useUser from \"./UserContext\";\n\ntype LambdaContextValue = {\n\tinvokeLambda: (functionName: string, payload: object) => Promise<object>;\n};\n\nconst LambdaContext = createContext<LambdaContextValue>({\n\tinvokeLambda: (_functionName, _payload) => Promise.reject(),\n});\n\nconst LambdaProvider = ({ children }) => {\n\tconst {\n\t\tuser: { accessToken },\n\t\tawsConfig,\n\t\tawsCredentials,\n\t} = useUser();\n\tconst [lambda, setLambda] = useState<LambdaClient>();\n\n\tuseEffect(() => {\n\t\tif (awsConfig) {\n\t\t\tsetLambda(new LambdaClient(awsConfig));\n\t\t} else {\n\t\t\tsetLambda(undefined);\n\t\t}\n\t}, [awsConfig]);\n\n\tuseEffect(() => {\n\t\tif (awsCredentials) {\n\t\t\tsetLambda((oldLambda) => {\n\t\t\t\tif (oldLambda) {\n\t\t\t\t\toldLambda.config.credentials = awsCredentials;\n\t\t\t\t}\n\t\t\t\treturn oldLambda;\n\t\t\t});\n\t\t}\n\t}, [awsCredentials]);\n\n\tconst invokeLambda = useCallback(\n\t\t(functionName: string, payload: object) => {\n\t\t\tif (lambda) {\n\t\t\t\tconst encoder = new TextEncoder();\n\t\t\t\tconst decoder = new TextDecoder();\n\t\t\t\tconst params: InvokeCommandInput = {\n\t\t\t\t\tFunctionName: functionName,\n\t\t\t\t\tClientContext: btoa(JSON.stringify({ custom: { accessToken } })),\n\t\t\t\t\tPayload: payload\n\t\t\t\t\t\t? encoder.encode(JSON.stringify(payload))\n\t\t\t\t\t\t: undefined,\n\t\t\t\t};\n\t\t\t\tconst command = new InvokeCommand(params);\n\t\t\t\treturn new Promise<object>((resolve, reject) => {\n\t\t\t\t\tlambda\n\t\t\t\t\t\t.send(command)\n\t\t\t\t\t\t.then((data) => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!data.StatusCode ||\n\t\t\t\t\t\t\t\tdata.StatusCode !== 200 ||\n\t\t\t\t\t\t\t\t!data.Payload\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treject(data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst responsePayload = JSON.parse(decoder.decode(data.Payload));\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!responsePayload ||\n\t\t\t\t\t\t\t\t!responsePayload.statusCode ||\n\t\t\t\t\t\t\t\tresponsePayload.statusCode !== 200\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treject(data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresolve(responsePayload.body);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn Promise.reject(\"Lambda client is undefined\");\n\t\t},\n\t\t[lambda, accessToken],\n\t);\n\n\treturn (\n\t\t<LambdaContext.Provider\n\t\t\tvalue={{\n\t\t\t\tinvokeLambda: lambda ? invokeLambda : () => Promise.reject(),\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</LambdaContext.Provider>\n\t);\n};\n\nconst useLambda = () => {\n\tconst { invokeLambda } = useContext(LambdaContext);\n\n\treturn { invokeLambda };\n};\n\nexport default useLambda;\nexport { LambdaProvider };\n", "import React, {\n\tcreateContext,\n\tuseCallback,\n\tuseContext,\n\tuseEffect,\n\tuseState,\n} from \"react\";\n\ntype MessageContextValue = {\n\tmessage: string | undefined;\n\tshowMessage: (message: string) => void;\n\tdismissMessage: () => void;\n};\n\nconst MessageContext = createContext<MessageContextValue>({\n\tmessage: \"\",\n\tshowMessage: (_message: string) => {},\n\tdismissMessage: () => {},\n});\n\nconst MessageProvider = ({ children }) => {\n\tconst [snackPack, setSnackPack] = useState<string[]>([]);\n\tconst [message, setMessage] = useState<string>();\n\n\tuseEffect(() => {\n\t\tif (snackPack.length && !message) {\n\t\t\tsetMessage(snackPack[0]);\n\t\t\tsetSnackPack((prev) => prev.slice(1));\n\t\t}\n\t}, [snackPack, message]);\n\n\tconst showMessage = useCallback((newMessage: string) => {\n\t\tsetSnackPack((prev) => [...prev, newMessage]);\n\t}, []);\n\n\tconst dismissMessage = useCallback(() => {\n\t\tsetMessage(undefined);\n\t}, []);\n\n\treturn (\n\t\t<MessageContext.Provider value={{ message, showMessage, dismissMessage }}>\n\t\t\t{children}\n\t\t</MessageContext.Provider>\n\t);\n};\n\nconst useMessage = () => {\n\tconst { showMessage } = useContext(MessageContext);\n\n\treturn { showMessage };\n};\n\nconst useMessageAreaState = () => {\n\tconst { message, dismissMessage } = useContext(MessageContext);\n\n\treturn { message, dismissMessage };\n};\n\nexport default useMessage;\nexport { MessageProvider, useMessageAreaState };\n", "import React, { createContext, useCallback, useContext, useState } from \"react\";\n\ntype SpinnerContextValue = {\n\tshowSpinner: () => void;\n\tdismissSpinner: () => void;\n\tshowing: boolean;\n};\n\nconst SpinnerContext = createContext<SpinnerContextValue>({\n\tshowSpinner: () => {},\n\tdismissSpinner: () => {},\n\tshowing: false,\n});\n\nconst SpinnerProvider = ({ children }) => {\n\tconst [spinnerCount, setSpinnerCount] = useState(0);\n\n\tconst showSpinner = useCallback(() => {\n\t\tsetSpinnerCount((prev) => prev + 1);\n\t}, []);\n\n\tconst dismissSpinner = useCallback(() => {\n\t\tsetSpinnerCount((prev) => prev - 1);\n\t}, []);\n\n\tconst showing = spinnerCount > 0;\n\n\treturn (\n\t\t<SpinnerContext.Provider value={{ showSpinner, dismissSpinner, showing }}>\n\t\t\t{children}\n\t\t</SpinnerContext.Provider>\n\t);\n};\n\nconst useSpinner = () => {\n\tconst { showSpinner, dismissSpinner } = useContext(SpinnerContext);\n\n\treturn { showSpinner, dismissSpinner };\n};\n\nconst useSpinnerAreaState = () => {\n\tconst { showing } = useContext(SpinnerContext);\n\n\treturn { showing };\n};\n\nexport default useSpinner;\nexport { SpinnerProvider, useSpinnerAreaState };\n", "import { useEffect } from \"react\";\nimport useAppConfig from \"./AppConfigContext\";\nimport useMessage from \"./MessageContext\";\nimport useSpinner from \"./SpinnerContext\";\nimport useUser from \"./UserContext\";\nimport authRedirect from \"./core/authRedirect\";\n\nconst useAuthRedirect = () => {\n\tconst {\n\t\tappConfig: { appBasePath, appMessages },\n\t} = useAppConfig();\n\n\tconst { showMessage } = useMessage();\n\tconst { showSpinner, dismissSpinner } = useSpinner();\n\tconst { loginWithAuthorizationCode } = useUser();\n\n\tuseEffect(() => {\n\t\tauthRedirect(\n\t\t\tappBasePath,\n\t\t\tshowSpinner,\n\t\t\tdismissSpinner,\n\t\t\tloginWithAuthorizationCode,\n\t\t\tshowMessage,\n\t\t\tappMessages,\n\t\t);\n\t}, [\n\t\tappBasePath,\n\t\tshowSpinner,\n\t\tdismissSpinner,\n\t\tloginWithAuthorizationCode,\n\t\tshowMessage,\n\t\tappMessages,\n\t]);\n};\n\nexport default useAuthRedirect;\n", "import type { AppMessages } from \"./makeAppConfig\";\n\nconst authRedirect = (\n\tappBasePath: string | undefined,\n\tshowSpinner: () => void,\n\tdismissSpinner: () => void,\n\tloginWithAuthorizationCode: (authorizationCode: string) => Promise<void>,\n\tshowMessage: (message: string) => void,\n\tappMessages: AppMessages | undefined,\n) => {\n\tif (window.location.pathname === appBasePath) {\n\t\tconst search = new URLSearchParams(window.location.search);\n\t\tif (search.get(\"auth-redirect\") !== null && search.get(\"code\") !== null) {\n\t\t\twindow.history.replaceState({}, \"\", window.location.pathname);\n\t\t\tconst authorizationCode = search.get(\"code\");\n\n\t\t\tif (authorizationCode) {\n\t\t\t\tshowSpinner();\n\t\t\t\tloginWithAuthorizationCode(authorizationCode)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tif (appMessages) {\n\t\t\t\t\t\t\tshowMessage(appMessages.LOGIN_SUCCESSFUL);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\tif (appMessages) {\n\t\t\t\t\t\t\tshowMessage(appMessages.LOGIN_FAILED);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.finally(() => {\n\t\t\t\t\t\tdismissSpinner();\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport default authRedirect;\n", "type AppMessages = {\n\tLOGIN_SUCCESSFUL: string;\n\tLOGIN_FAILED: string;\n\tLOGOUT_SUCCESSFUL: string;\n\tLOGOUT_FAILED: string;\n\tLOGGED_OUT_USER: string;\n\tLOG_COULD_NOT_LOGIN_WITH_REFRESHED_TOKENS: string;\n\tLOG_COULD_NOT_DECODE_AUTHENTICATION_RESPONSE: string;\n\tLOG_COULD_NOT_GET_REFRESHED_TOKENS: string;\n\tLOG_COULD_NOT_REFRESH_TOKENS: string;\n\tLOG_NO_REFRESH_TOKEN_AVAILABLE: string;\n\tLOG_COULD_NOT_GET_IDENTIFICATION_TOKENS: string;\n};\n\ntype AppConfig = {\n\tappBasePath: string;\n\tappAuthUrl: string;\n\tappClientId: string;\n\tappAuthRedirect: string;\n\tappExternalLoginUrl: string;\n\tappIdentityPoolId: string;\n\tappRegion: string;\n\tappUserPoolId: string;\n\tappLogoUrl: string;\n\tappMessages: AppMessages;\n\thideLogin: boolean;\n\tappRefreshTokenStorageKey: string;\n};\n\ntype MakeAppConfigParam = {\n\tappHost: string;\n\tappBasePath: string;\n\tappRegion: string;\n\tappUserPoolId: string;\n\tappUserPoolDomain: string;\n\tappClientId: string;\n\tappIdentityPoolId: string;\n\tappRefreshTokenStorageKey: string;\n\tappLogoUrl: string;\n\tappMessages: AppMessages;\n\thideLogin?: boolean;\n};\n\nconst makeAppConfig = ({\n\tappHost,\n\tappBasePath,\n\tappRegion,\n\tappUserPoolId,\n\tappUserPoolDomain,\n\tappClientId,\n\tappIdentityPoolId,\n\tappRefreshTokenStorageKey,\n\tappLogoUrl,\n\tappMessages,\n\thideLogin,\n}: MakeAppConfigParam): AppConfig => {\n\tconst appBaseAuthUrl = `https://${appUserPoolDomain}.auth.${appRegion}.amazoncognito.com`;\n\tconst appAuthRedirect = `${appHost}${appBasePath}?auth-redirect`;\n\tconst appAuthUrl = `${appBaseAuthUrl}/oauth2/token`;\n\tconst appExternalLoginUrl = `${appBaseAuthUrl}/login?client_id=${appClientId}&response_type=code&scope=email+openid+profile&redirect_uri=${appAuthRedirect}`;\n\n\treturn {\n\t\tappBasePath,\n\t\tappRegion,\n\t\tappUserPoolId,\n\t\tappClientId,\n\t\tappIdentityPoolId,\n\t\tappAuthRedirect,\n\t\tappAuthUrl,\n\t\tappExternalLoginUrl,\n\t\tappRefreshTokenStorageKey,\n\t\tappLogoUrl,\n\t\tappMessages,\n\t\thideLogin: hideLogin || false,\n\t};\n};\n\nexport default makeAppConfig;\n\nexport type { AppMessages, AppConfig };\n", "import { useLocation } from \"react-router-dom\";\n\nimport useAppConfig from \"./AppConfigContext\";\nimport type { AppRoute } from \"./BaseAppScope\";\nimport useMessage from \"./MessageContext\";\nimport useUser from \"./UserContext\";\n\nconst useAppBarState = (routes: AppRoute[]) => {\n\tconst {\n\t\tappConfig: { appMessages, hideLogin, appExternalLoginUrl },\n\t} = useAppConfig();\n\tconst { showMessage } = useMessage();\n\tconst {\n\t\tuser: { name: userName },\n\t\tlogoff,\n\t} = useUser();\n\n\tconst location = useLocation();\n\n\tconst logoffAndShowMessage = () => {\n\t\tlogoff()\n\t\t\t.then(() => showMessage(appMessages.LOGOUT_SUCCESSFUL))\n\t\t\t.catch(() => showMessage(appMessages.LOGOUT_FAILED));\n\t};\n\n\tconst currentRoute = routes.find((route) => route.path === location.pathname);\n\tconst currentRouteLabel = currentRoute ? currentRoute.label : \"\";\n\n\tconst hideLoginButton = userName || hideLogin;\n\tconst hideAccountButton = !userName || hideLogin;\n\n\treturn {\n\t\tcurrentRouteLabel,\n\t\thideLoginButton,\n\t\tappExternalLoginUrl,\n\t\thideAccountButton,\n\t\tuserName,\n\t\tlogoffAndShowMessage,\n\t};\n};\n\nexport default useAppBarState;\n", "import useAppConfig from \"./AppConfigContext\";\nimport type { AppRoute } from \"./BaseAppScope\";\nimport useUser from \"./UserContext\";\n\nconst useAppDrawerState = (routes: AppRoute[]) => {\n\tconst {\n\t\tappConfig: { appLogoUrl },\n\t} = useAppConfig();\n\tconst {\n\t\tuser: { groups: userGroups },\n\t} = useUser();\n\n\tconst userFromAuthorizedGroup = (authorizedGroups: string[] | undefined) => {\n\t\tif (!authorizedGroups) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!userGroups) {\n\t\t\treturn false;\n\t\t}\n\t\treturn authorizedGroups.some((authorizedGroup) =>\n\t\t\tuserGroups.includes(authorizedGroup),\n\t\t);\n\t};\n\n\tconst menuRoutes = routes\n\t\t.filter((route) => !route.hideFromMenu)\n\t\t.filter((route) => userFromAuthorizedGroup(route.authorizedGroups));\n\n\treturn { appLogoUrl, menuRoutes };\n};\n\nexport default useAppDrawerState;\n"],
  "mappings": "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",
  "names": ["React", "React", "React", "createContext", "useCallback", "useContext", "useEffect", "useState", "React", "createContext", "useContext", "createContext", "logoff", "loginWithAwsCognitoIdentityPool", "refreshIdAndAccessTokens", "loginWithAuthorizationCode", "React", "useContext", "createContext", "useState", "useEffect", "React", "useContext", "useCallback", "React", "createContext", "useCallback", "useContext", "useEffect", "useState", "createContext", "useState", "useEffect", "useCallback", "React", "useContext", "React", "createContext", "useCallback", "useContext", "useEffect", "useState", "React", "createContext", "useCallback", "useContext", "useState", "React", "useEffect", "loginWithAuthorizationCode", "loginWithAuthorizationCode", "useEffect", "React", "logoff"]
}
